"use strict";(self.webpackChunkCRIS=self.webpackChunkCRIS||[]).push([[4589],{67709:(ue,W,t)=>{function S(){return new Float32Array(4)}function h(m,I,U,ne){const Y=new Float32Array(4);return Y[0]=m,Y[1]=I,Y[2]=U,Y[3]=ne,Y}function L(){return S()}function e(){return h(1,1,1,1)}function r(){return h(1,0,0,0)}function o(){return h(0,1,0,0)}function u(){return h(0,0,1,0)}function d(){return h(0,0,0,1)}t.d(W,{f:()=>h});const T=L(),N=e(),G=r(),V=o(),F=u(),R=d();Object.freeze(Object.defineProperty({__proto__:null,ONES:N,UNIT_W:R,UNIT_X:G,UNIT_Y:V,UNIT_Z:F,ZEROS:T,clone:function A(m){const I=new Float32Array(4);return I[0]=m[0],I[1]=m[1],I[2]=m[2],I[3]=m[3],I},create:S,createView:function s(m,I){return new Float32Array(m,I,4)},fromValues:h,ones:e,unitW:d,unitX:r,unitY:o,unitZ:u,zeros:L},Symbol.toStringTag,{value:"Module"}))},93548:(ue,W,t)=>{t.d(W,{U:()=>Be});var S=t(43987),A=t(67709),h=t(87526),s=t(62856),L=t(11176),e=t(67969),r=t(94299),d=t(39351),G=t(62208),V=t(4619),F=t(39406),R=t(66215),H=t(18716),m=t(25575);class U extends R.Z{dispose(){}getGeometryType(){return F.LW.FILL}supportsSymbology(i){return i!==F.mD.DOT_DENSITY}drawGeometry(i,l,a,x){const{context:f,painter:v,rendererInfo:O,requiredLevel:P,passOptions:D,requestRender:z,allowDelayedRender:n}=i,_=H.dk.load(a.materialKey),y=(0,m.a1)(_.data),w=null!=D&&"hittest"===D.type,M=v.materialManager,{shader:b,vertexLayout:q,hittestAttributes:B}=y.programSpec??function I(_e){const i={geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_id",count:3,type:e.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:e.g.UNSIGNED_BYTE},{location:3,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_aux1",count:4,type:e.g.UNSIGNED_SHORT},{location:5,name:"a_aux2",count:4,type:e.g.SHORT},{location:6,name:"a_aux3",count:4,type:e.g.UNSIGNED_BYTE},{location:7,name:"a_zoomRange",count:2,type:e.g.UNSIGNED_SHORT}]};switch(_e.symbologyType){case F.mD.SIMPLE:case F.mD.OUTLINE_FILL_SIMPLE:i.geometry.splice(7,1),i.geometry.splice(4,1)}return{shader:"materials/fill",vertexLayout:i}}(_);let Q=e.MX.TRIANGLES,ae=(0,h.cM)(_.data,q);w&&(ae=this._getTriangleDesc(a.materialKey,ae,B),Q=e.MX.POINTS);const{attributes:J,bufferLayouts:ee}=ae,K=M.getMaterialProgram(i,_,b,J,x);if(n&&null!=z&&!K.compiled)return void z();f.useProgram(K),this._setSharedUniforms(K,i,l);const{row:k,col:X}=l.key,$=X*d.i9,j=k*d.i9;K.setUniform2f("u_tileOffset",$%d.ad,j%d.ad),K.setUniform2f("u_maxIntNumOfCrossing",Math.floor($/d.ad),Math.floor(j/d.ad)),_.textureBinding&&(v.textureManager.bindTextures(f,K,_),K.setUniform1f("u_zoomFactor",1/2**(P-l.key.level)));const re=1/i.pixelRatio;K.setUniform1f("u_blur",re),K.setUniform1f("u_antialiasing",re),this._setSizeVVUniforms(_,K,O,l),this._setColorAndOpacityVVUniforms(_,K,O);const le=a.target.getVAO(f,ee,J,w);let pe=a.indexCount,ve=a.indexFrom*Uint32Array.BYTES_PER_ELEMENT;w&&(pe/=3,ve/=3),f.bindVAO(le),this._drawFills(i,l,K,Q,pe,ve)}_drawFills(i,l,a,x,f,v){i.context.drawElements(x,f,e.g.UNSIGNED_INT,v)}}var ne=t(83994),Y=t(85775),fe=t(49266),xe=t(20781),Te=t(18952),de=t(31548),g=t(49353),p=t(64887),E=t(8650),C=t(23482),te=t(13382),se=t(21286),ie=t(49966),ce=t(5254),oe=t(1268);const ge=1/65536;var be=t(9545),Ce=t(47132),Re=t(43289);const Be={marker:C.Z,line:class Fe extends R.Z{dispose(){}getGeometryType(){return F.LW.LINE}supportsSymbology(i){return!0}drawGeometry(i,l,a,x){const{context:f,painter:v,rendererInfo:O,displayLevel:P,passOptions:D,requestRender:z,allowDelayedRender:n}=i,_=H.a.load(a.materialKey),y=null!=D&&"hittest"===D.type;let w=(0,h.cM)(_.data,{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_id",count:4,type:e.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:e.g.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:e.g.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:e.g.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:e.g.BYTE},{location:7,name:"a_aux",count:2,type:e.g.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:e.g.UNSIGNED_SHORT}]}),M=e.MX.TRIANGLES;y&&(w=this._getTriangleDesc(a.materialKey,w),M=e.MX.POINTS);const{attributes:b,bufferLayouts:q}=w,B=v.materialManager.getMaterialProgram(i,_,"materials/line",b,x);if(n&&null!=z&&!B.compiled)return void z();const Q=1/i.pixelRatio;f.useProgram(B),this._setSharedUniforms(B,i,l),_.textureBinding&&v.textureManager.bindTextures(f,B,_),B.setUniform1f("u_zoomFactor",2**(P-l.key.level)),B.setUniform1f("u_blur",0+Q),B.setUniform1f("u_antialiasing",Q),this._setSizeVVUniforms(_,B,O,l),this._setColorAndOpacityVVUniforms(_,B,O),f.setFaceCullingEnabled(!1);const ee=a.target.getVAO(f,q,b,y);let K=a.indexCount,k=a.indexFrom*Uint32Array.BYTES_PER_ELEMENT;y&&(K/=3,k/=3),f.bindVAO(ee),f.drawElements(M,K,e.g.UNSIGNED_INT,k)}},fill:U,text:class we extends R.Z{dispose(){}getGeometryType(){return F.LW.TEXT}supportsSymbology(i){return!0}drawGeometry(i,l,a,x){const{context:f,painter:v,rendererInfo:O,state:P,passOptions:D,requestRender:z,allowDelayedRender:n}=i,_=H.qr.load(a.materialKey),y=null!=D&&"hittest"===D.type,{bufferLayouts:w,attributes:M}=(0,h.cM)(_.data,{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_id",count:4,type:e.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:e.g.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:e.g.BYTE},{location:6,name:"a_zoomRange",count:2,type:e.g.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:e.g.SHORT},{location:8,name:"a_texCoords",count:2,type:e.g.UNSIGNED_SHORT}]}),b=v.materialManager.getMaterialProgram(i,_,"materials/text",M,x);if(n&&null!=z&&!b.compiled)return void z();f.useProgram(b);let q=e.MX.TRIANGLES;y&&(q=e.MX.POINTS),this._setSharedUniforms(b,i,l),v.textureManager.bindTextures(f,b,_),b.setUniformMatrix3fv("u_displayMat3",P.displayMat3),b.setUniformMatrix3fv("u_displayViewMat3",P.displayViewMat3),this._setSizeVVUniforms(_,b,O,l),this._setColorAndOpacityVVUniforms(_,b,O),this._setRotationVVUniforms(_,b,O);const B=a.target.getVAO(f,w,M),Q=a.indexFrom*Uint32Array.BYTES_PER_ELEMENT;f.bindVAO(B),b.setUniform1f("u_isHaloPass",0),b.setUniform1f("u_isBackgroundPass",1),f.drawElements(q,a.indexCount,e.g.UNSIGNED_INT,Q),b.setUniform1f("u_isHaloPass",1),b.setUniform1f("u_isBackgroundPass",0),f.drawElements(e.MX.TRIANGLES,a.indexCount,e.g.UNSIGNED_INT,Q),b.setUniform1f("u_isHaloPass",0),b.setUniform1f("u_isBackgroundPass",0),f.drawElements(q,a.indexCount,e.g.UNSIGNED_INT,Q)}},label:class Le extends R.Z{dispose(){}getGeometryType(){return F.LW.LABEL}supportsSymbology(i){return!0}drawGeometry(i,l,a,x){const{context:f,painter:v,state:O,rendererInfo:P,requestRender:D,allowDelayedRender:z}=i,n=H.Gq.load(a.materialKey),_=n.mapAligned?1:0;if(!_&&Math.abs(l.key.level-Math.round(100*i.displayLevel)/100)>=1)return;const{bufferLayouts:y,attributes:w}=(0,h.cM)(n.data,{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_id",count:4,type:e.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:e.g.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:e.g.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:e.g.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:e.g.SHORT},{location:8,name:"a_texCoords",count:2,type:e.g.UNSIGNED_SHORT}]}),M=v.materialManager.getMaterialProgram(i,n,"materials/label",w,x);if(z&&null!=D&&!M.compiled)return void D();i.context.setStencilFunction(e.wb.EQUAL,0,255),f.useProgram(M),this._setSharedUniforms(M,i,l),v.textureManager.bindTextures(f,M,n);const b=1===_?O.displayViewMat3:O.displayMat3;this._setSizeVVUniforms(n,M,P,l),M.setUniform1f("u_mapRotation",Math.floor(O.rotation/360*254)),M.setUniform1f("u_mapAligned",_),M.setUniformMatrix3fv("u_displayMat3",b),M.setUniform1f("u_opacity",1),M.setUniform2fv("u_screenSize",i.state.size);const q=a.target.getVAO(f,y,w),B=a.indexFrom*Uint32Array.BYTES_PER_ELEMENT;f.bindVAO(q),M.setUniform1f("u_isHaloPass",0),M.setUniform1f("u_isBackgroundPass",1),f.drawElements(e.MX.TRIANGLES,a.indexCount,e.g.UNSIGNED_INT,B),M.setUniform1f("u_isHaloPass",1),M.setUniform1f("u_isBackgroundPass",0),f.drawElements(e.MX.TRIANGLES,a.indexCount,e.g.UNSIGNED_INT,B),M.setUniform1f("u_isHaloPass",0),M.setUniform1f("u_isBackgroundPass",0),f.drawElements(e.MX.TRIANGLES,a.indexCount,e.g.UNSIGNED_INT,B),f.setStencilTestEnabled(!0),f.setBlendingEnabled(!0)}},clip:class u extends s.Z{constructor(){super(...arguments),this._color=(0,A.f)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:i}){i.setStencilTestEnabled(!0),i.setBlendingEnabled(!1),i.setFaceCullingEnabled(!1),i.setColorMask(!1,!1,!1,!1),i.setStencilOp(e.xS.KEEP,e.xS.KEEP,e.xS.REPLACE),i.setStencilWriteMask(255),i.setStencilFunction(e.wb.ALWAYS,0,255)}draw(i,l){const{context:a,state:x,requestRender:f,allowDelayedRender:v}=i,O=(0,h.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT}]}),P=l.getVAO(a,x,O.attributes,O.bufferLayouts);null!=P.indexBuffer&&(this._program||(this._program=(0,r.H)(a,L.O)),!v||null==f||this._program.compiled?(a.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",x.displayMat3),a.bindVAO(P),a.drawElements(e.MX.TRIANGLES,P.indexBuffer.size,e.g.UNSIGNED_INT,0),a.bindVAO()):f())}},stencil:te.Z,bitmap:S.Z,overlay:class N extends s.Z{constructor(){super(...arguments),this._desc={vsPath:"overlay/overlay",fsPath:"overlay/overlay",attributes:new Map([["a_pos",0],["a_uv",1]])}}dispose(){}prepareState({context:i}){i.setBlendingEnabled(!0),i.setColorMask(!0,!0,!0,!0),i.setBlendFunctionSeparate(e.zi.ONE,e.zi.ONE_MINUS_SRC_ALPHA,e.zi.ONE,e.zi.ONE_MINUS_SRC_ALPHA),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(e.wb.GREATER,255,255)}draw(i,l){const{context:a,painter:x,requestRender:f,allowDelayedRender:v}=i;if(!l.isReady)return;const{computedOpacity:O,dvsMat3:P,isWrapAround:D,perspectiveTransform:z,texture:n}=l;i.timeline.begin(this.name);const _=x.materialManager.getProgram(this._desc);if(v&&null!=f&&!_.compiled)return void f();const y=(0,h.cM)("overlay",{geometry:[{location:0,name:"a_pos",count:2,type:e.g.FLOAT}],tex:[{location:1,name:"a_uv",count:2,type:e.g.UNSIGNED_SHORT}]}),w=l.getVAO(a,y.bufferLayouts,y.attributes);w&&(a.bindVAO(w),a.useProgram(_),a.bindTexture(n,d.Ib),_.setUniformMatrix3fv("u_dvsMat3",P),_.setUniform1i("u_texture",d.Ib),_.setUniform1f("u_opacity",O),_.setUniform2fv("u_perspective",z),a.drawArrays(e.MX.TRIANGLE_STRIP,0,D?10:4),a.bindVAO(),i.timeline.end(this.name))}},tileInfo:E.Z,vtlBackground:class he extends s.Z{constructor(){super(...arguments),this._color=(0,A.f)(1,0,0,1),this._patternMatrix=(0,ie.c)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(i,l){const{context:a,painter:x,styleLayerUID:f,requestRender:v,allowDelayedRender:O}=i;this._loadWGLResources(i);const P=i.displayLevel,D=i.styleLayer,z=D.backgroundMaterial,n=x.vectorTilesMaterialManager,_=D.getPaintValue("background-color",P),y=D.getPaintValue("background-opacity",P),w=D.getPaintValue("background-pattern",P),M=void 0!==w,b=_[3]*y,q=1|window.devicePixelRatio,B=i.spriteMosaic;let Q,ae;const J=q>d.Vo?2:1,ee=i.drawPhase===F.jx.HITTEST,K=this._programOptions;K.id=ee,K.pattern=M;const k=n.getMaterialProgram(a,z,K);if(!O||null==v||k.compiled){if(a.bindVAO(this._vao),a.useProgram(k),M){const X=B.getMosaicItemPosition(w,!0);if(null!=X){const{tl:$,br:j,page:re}=X;Q=j[0]-$[0],ae=j[1]-$[1];const le=B.getPageSize(re);null!=le&&(B.bind(a,e.cw.LINEAR,re,d.dD),k.setUniform4f("u_tlbr",$[0],$[1],j[0],j[1]),k.setUniform2fv("u_mosaicSize",le),k.setUniform1i("u_texture",d.dD))}k.setUniform1f("u_opacity",y)}else this._color[0]=b*_[0],this._color[1]=b*_[1],this._color[2]=b*_[2],this._color[3]=b,k.setUniform4fv("u_color",this._color);if(k.setUniform1f("u_depth",D.z||0),ee){const X=(0,ce.Au)(f+1);k.setUniform4fv("u_id",X)}for(const X of l){if(k.setUniform1f("u_coord_range",X.rangeX),k.setUniformMatrix3fv("u_dvsMat3",X.transforms.dvs),M){const $=Math.max(2**(Math.round(P)-X.key.level),1),j=J*X.width*$,re=j/(0,se.fp)(Q),le=j/(0,se.fp)(ae);this._patternMatrix[0]=re,this._patternMatrix[4]=le,k.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}a.setStencilFunction(e.wb.EQUAL,0,255),a.drawArrays(e.MX.TRIANGLE_STRIP,0,4)}}else v()}_loadWGLResources(i){if(this._vao)return;const{context:l,styleLayer:a}=i,x=a.backgroundMaterial,f=new Int8Array([0,0,1,0,0,1,1,1]),v=ne.f.createVertex(l,e.l1.STATIC_DRAW,f),O=new g.U(l,x.getAttributeLocations(),x.getLayoutInfo(),{geometry:v});this._vao=O}},vtlFill:class ye extends s.Z{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(i,l){const{displayLevel:a,drawPhase:x,renderPass:f,spriteMosaic:v,styleLayerUID:O}=i;let P=!1;for(const J of l)if(J.layerData.has(O)){const ee=J.layerData.get(O);if(ee.fillIndexCount>0||ee.outlineIndexCount>0){P=!0;break}}if(!P)return;const D=i.styleLayer,z=D.getPaintProperty("fill-pattern"),n=void 0!==z,_=n&&z.isDataDriven;let y;if(n&&!_){const J=z.getValue(a);y=v.getMosaicItemPosition(J,!0)}const w=!n&&D.getPaintValue("fill-antialias",a);let q,M=!0,b=1;if(!n){const J=D.getPaintProperty("fill-color"),ee=D.getPaintProperty("fill-opacity");if(!J?.isDataDriven&&!ee?.isDataDriven){const K=D.getPaintValue("fill-color",a);b=D.getPaintValue("fill-opacity",a)*K[3],b>=1&&(M=!1)}}if(M&&"opaque"===f)return;x===F.jx.HITTEST&&(q=(0,ce.Au)(O+1));const B=D.getPaintValue("fill-translate",a),Q=D.getPaintValue("fill-translate-anchor",a);(M||"translucent"!==f)&&this._drawFill(i,O,D,l,B,Q,n,y,_,q),w&&"opaque"!==f&&!(!D.hasDataDrivenOutlineColor&&D.outlineUsesFillColor&&b<1)&&this._drawOutline(i,O,D,l,B,Q,q)}_drawFill(i,l,a,x,f,v,O,P,D,z){if(O&&!D&&null==P)return;const{context:n,displayLevel:_,state:y,drawPhase:w,painter:M,pixelRatio:b,spriteMosaic:q,requestRender:B,allowDelayedRender:Q}=i,ae=a.fillMaterial,J=M.vectorTilesMaterialManager,ee=b>d.Vo?2:1,K=w===F.jx.HITTEST,k=this._fillProgramOptions;k.id=K,k.pattern=O;const X=J.getMaterialProgram(n,ae,k);if(Q&&null!=B&&!X.compiled)return void B();if(n.useProgram(X),null!=P){const{page:j}=P,re=q.getPageSize(j);null!=re&&(q.bind(n,e.cw.LINEAR,j,d.dD),X.setUniform2fv("u_mosaicSize",re),X.setUniform1i("u_texture",d.dD))}X.setUniformMatrix3fv("u_displayMat3",v===oe.fD.VIEWPORT?y.displayMat3:y.displayViewMat3),X.setUniform2fv("u_fillTranslation",f),X.setUniform1f("u_depth",a.z+ge),K&&X.setUniform4fv("u_id",z);let $=-1;for(const j of x){if(!j.layerData.has(l))continue;j.key.level!==$&&($=j.key.level,ae.setDataUniforms(X,_,a,$,q));const re=j.layerData.get(l);if(!re.fillIndexCount)continue;re.prepareForRendering(n);const le=re.fillVAO;if(null!=le){if(n.bindVAO(le),X.setUniformMatrix3fv("u_dvsMat3",j.transforms.dvs),n.setStencilFunction(e.wb.EQUAL,j.stencilRef,255),O){const pe=Math.max(2**(Math.round(_)-j.key.level),1);X.setUniform1f("u_patternFactor",j.rangeX/(ee*j.width*pe))}if(D){const pe=re.patternMap;if(!pe)continue;for(const[ve,Ie]of pe){const De=q.getPageSize(ve);null!=De&&(q.bind(n,e.cw.LINEAR,ve,d.dD),X.setUniform2fv("u_mosaicSize",De),X.setUniform1i("u_texture",d.dD),n.drawElements(e.MX.TRIANGLES,Ie[1],e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Ie[0]))}}else n.drawElements(e.MX.TRIANGLES,re.fillIndexCount,e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*re.fillIndexStart);j.triangleCount+=re.fillIndexCount/3}}}_drawOutline(i,l,a,x,f,v,O){const{context:P,displayLevel:D,state:z,drawPhase:n,painter:_,pixelRatio:y,spriteMosaic:w,requestRender:M,allowDelayedRender:b}=i,q=a.outlineMaterial,B=_.vectorTilesMaterialManager,Q=.75/y,ae=n===F.jx.HITTEST,J=this._outlineProgramOptions;J.id=ae;const ee=B.getMaterialProgram(P,q,J);if(b&&null!=M&&!ee.compiled)return void M();P.useProgram(ee),ee.setUniformMatrix3fv("u_displayMat3",v===oe.fD.VIEWPORT?z.displayMat3:z.displayViewMat3),ee.setUniform2fv("u_fillTranslation",f),ee.setUniform1f("u_depth",a.z+ge),ee.setUniform1f("u_outline_width",Q),ae&&ee.setUniform4fv("u_id",O);let K=-1;for(const k of x){if(!k.layerData.has(l))continue;k.key.level!==K&&(K=k.key.level,q.setDataUniforms(ee,D,a,K,w));const X=k.layerData.get(l);if(X.prepareForRendering(P),!X.outlineIndexCount)continue;const $=X.outlineVAO;null!=$&&(P.bindVAO($),ee.setUniformMatrix3fv("u_dvsMat3",k.transforms.dvs),P.setStencilFunction(e.wb.EQUAL,k.stencilRef,255),P.drawElements(e.MX.TRIANGLES,X.outlineIndexCount,e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*X.outlineIndexStart),k.triangleCount+=X.outlineIndexCount/3)}}},vtlLine:class Oe extends s.Z{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(i,l){const{context:a,displayLevel:x,state:f,drawPhase:v,painter:O,pixelRatio:P,spriteMosaic:D,styleLayerUID:z,requestRender:n,allowDelayedRender:_}=i;if(!l.some(le=>le.layerData.get(z)?.lineIndexCount??!1))return;const y=i.styleLayer,w=y.lineMaterial,M=O.vectorTilesMaterialManager,b=y.getPaintValue("line-translate",x),q=y.getPaintValue("line-translate-anchor",x),B=y.getPaintProperty("line-pattern"),Q=void 0!==B,ae=Q&&B.isDataDriven;let J,ee;if(Q&&!ae){const le=B.getValue(x);J=D.getMosaicItemPosition(le)}let K=!1;if(!Q){const le=y.getPaintProperty("line-dasharray");if(ee=void 0!==le,K=ee&&le.isDataDriven,ee&&!K){const pe=le.getValue(x),ve=y.getDashKey(pe,y.getLayoutValue("line-cap",x));J=D.getMosaicItemPosition(ve)}}const k=1/P,X=v===F.jx.HITTEST,$=this._programOptions;$.id=X,$.pattern=Q,$.sdf=ee;const j=M.getMaterialProgram(a,w,$);if(_&&null!=n&&!j.compiled)return void n();if(a.useProgram(j),j.setUniformMatrix3fv("u_displayViewMat3",f.displayViewMat3),j.setUniformMatrix3fv("u_displayMat3",q===oe.fD.VIEWPORT?f.displayMat3:f.displayViewMat3),j.setUniform2fv("u_lineTranslation",b),j.setUniform1f("u_depth",y.z),j.setUniform1f("u_antialiasing",k),X){const le=(0,ce.Au)(z+1);j.setUniform4fv("u_id",le)}if(J&&null!=J){const{page:le}=J,pe=D.getPageSize(le);null!=pe&&(D.bind(a,e.cw.LINEAR,le,d.dD),j.setUniform2fv("u_mosaicSize",pe),j.setUniform1i("u_texture",d.dD))}let re=-1;for(const le of l){if(!le.layerData.has(z))continue;le.key.level!==re&&(re=le.key.level,w.setDataUniforms(j,x,y,re,D)),j.setUniform1f("u_zoomFactor",2**(x-re)/P);const ve=le.layerData.get(z);if(!ve.lineIndexCount)continue;ve.prepareForRendering(a);const Ie=ve.vao;if(null!=Ie){if(a.bindVAO(Ie),j.setUniformMatrix3fv("u_dvsMat3",le.transforms.dvs),a.setStencilFunction(e.wb.EQUAL,le.stencilRef,255),ae||K){const De=ve.patternMap;if(!De)continue;for(const[Pe,me]of De){const Ae=D.getPageSize(Pe);null!=Ae&&(D.bind(a,e.cw.LINEAR,Pe,d.dD),j.setUniform2fv("u_mosaicSize",Ae),j.setUniform1i("u_texture",d.dD),a.drawElements(e.MX.TRIANGLES,me[1],e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*me[0]))}}else a.drawElements(e.MX.TRIANGLES,ve.lineIndexCount,e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*ve.lineIndexStart);le.triangleCount+=ve.lineIndexCount/3}}}},vtlCircle:class Se extends s.Z{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(i,l){const{context:a,displayLevel:x,requiredLevel:f,state:v,drawPhase:O,painter:P,spriteMosaic:D,styleLayerUID:z,requestRender:n,allowDelayedRender:_}=i;if(!l.some(K=>K.layerData.get(z)?.circleIndexCount??!1))return;const y=i.styleLayer,w=y.circleMaterial,M=P.vectorTilesMaterialManager,q=y.getPaintValue("circle-translate",x),B=y.getPaintValue("circle-translate-anchor",x),Q=O===F.jx.HITTEST,ae=this._programOptions;ae.id=Q;const J=M.getMaterialProgram(a,w,ae);if(_&&null!=n&&!J.compiled)return void n();a.useProgram(J),J.setUniformMatrix3fv("u_displayMat3",B===oe.fD.VIEWPORT?v.displayMat3:v.displayViewMat3),J.setUniform2fv("u_circleTranslation",q),J.setUniform1f("u_depth",y.z),J.setUniform1f("u_antialiasingWidth",1.2);let ee=-1;if(Q){const K=(0,ce.Au)(z+1);J.setUniform4fv("u_id",K)}for(const K of l){if(!K.layerData.has(z))continue;K.key.level!==ee&&(ee=K.key.level,w.setDataUniforms(J,x,y,ee,D));const k=K.layerData.get(z);if(!k.circleIndexCount)continue;k.prepareForRendering(a);const X=k.vao;null!=X&&(a.bindVAO(X),J.setUniformMatrix3fv("u_dvsMat3",K.transforms.dvs),f!==K.key.level?a.setStencilFunction(e.wb.EQUAL,K.stencilRef,255):a.setStencilFunction(e.wb.GREATER,255,255),a.drawElements(e.MX.TRIANGLES,k.circleIndexCount,e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*k.circleIndexStart),K.triangleCount+=k.circleIndexCount/3)}}},vtlSymbol:class Ne extends s.Z{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,be.c)()}dispose(){}drawMany(i,l){const{drawPhase:a,styleLayerUID:x}=i,f=i.styleLayer;let v;a===F.jx.HITTEST&&(v=(0,ce.Au)(x+1)),this._drawIcons(i,f,l,v),this._drawText(i,f,l,v)}_drawIcons(i,l,a,x){const{context:f,displayLevel:v,drawPhase:O,painter:P,spriteMosaic:D,state:z,styleLayerUID:n,requestRender:_,allowDelayedRender:y}=i,w=l.iconMaterial,M=P.vectorTilesMaterialManager;let b,q=!1;for(const re of a)if(re.layerData.has(n)&&(b=re.layerData.get(n),b.iconPerPageElementsMap.size>0)){q=!0;break}if(!q)return;const B=l.getPaintValue("icon-translate",v),Q=l.getPaintValue("icon-translate-anchor",v);let ae=l.getLayoutValue("icon-rotation-alignment",v);ae===oe.aF.AUTO&&(ae=l.getLayoutValue("symbol-placement",v)===oe.R.POINT?oe.aF.VIEWPORT:oe.aF.MAP);const J=ae===oe.aF.MAP,ee=l.getLayoutValue("icon-keep-upright",v)&&J,K=b.isIconSDF,k=O===F.jx.HITTEST,X=this._iconProgramOptions;X.id=k,X.sdf=K;const $=M.getMaterialProgram(f,w,X);if(y&&null!=_&&!$.compiled)return void _();f.useProgram($),$.setUniformMatrix3fv("u_displayViewMat3",ae===oe.aF.MAP?z.displayViewMat3:z.displayMat3),$.setUniformMatrix3fv("u_displayMat3",Q===oe.fD.VIEWPORT?z.displayMat3:z.displayViewMat3),$.setUniform2fv("u_iconTranslation",B),$.setUniform1f("u_depth",l.z),$.setUniform1f("u_mapRotation",(0,Re.s5)(z.rotation)),$.setUniform1f("u_keepUpright",ee?1:0),$.setUniform1f("u_level",10*v),$.setUniform1i("u_texture",d.dD),$.setUniform1f("u_fadeDuration",Ce.v7/1e3),k&&$.setUniform4fv("u_id",x);let j=-1;for(const re of a){if(!re.layerData.has(n)||(re.key.level!==j&&(j=re.key.level,w.setDataUniforms($,v,l,j,D)),b=re.layerData.get(n),0===b.iconPerPageElementsMap.size))continue;b.prepareForRendering(f),b.updateOpacityInfo();const le=b.iconVAO;if(null!=le){f.bindVAO(le),$.setUniformMatrix3fv("u_dvsMat3",re.transforms.dvs),$.setUniform1f("u_time",(performance.now()-b.lastOpacityUpdate)/1e3);for(const[pe,ve]of b.iconPerPageElementsMap)this._renderIconRange(i,$,ve,pe,re)}}}_renderIconRange(i,l,a,x,f){const{context:v,spriteMosaic:O}=i;this._spritesTextureSize[0]=O.getWidth(x)/4,this._spritesTextureSize[1]=O.getHeight(x)/4,l.setUniform2fv("u_mosaicSize",this._spritesTextureSize),O.bind(v,e.cw.LINEAR,x,d.dD),this._setStencilState(i,f),v.drawElements(e.MX.TRIANGLES,a[1],e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*a[0]),f.triangleCount+=a[1]/3}_drawText(i,l,a,x){const{context:f,displayLevel:v,drawPhase:O,glyphMosaic:P,painter:D,pixelRatio:z,spriteMosaic:n,state:_,styleLayerUID:y,requestRender:w,allowDelayedRender:M}=i,b=l.textMaterial,q=D.vectorTilesMaterialManager;let B,Q=!1;for(const Ee of a)if(Ee.layerData.has(y)&&(B=Ee.layerData.get(y),B.glyphPerPageElementsMap.size>0)){Q=!0;break}if(!Q)return;const ae=l.getPaintProperty("text-opacity");if(ae&&!ae.isDataDriven&&0===ae.getValue(v))return;const J=l.getPaintProperty("text-color"),ee=!J||J.isDataDriven||J.getValue(v)[3]>0,K=l.getPaintProperty("text-halo-width"),k=l.getPaintProperty("text-halo-color"),X=(!K||K.isDataDriven||K.getValue(v)>0)&&(!k||k.isDataDriven||k.getValue(v)[3]>0);if(!ee&&!X)return;let j=l.getLayoutValue("text-rotation-alignment",v);j===oe.aF.AUTO&&(j=l.getLayoutValue("symbol-placement",v)===oe.R.POINT?oe.aF.VIEWPORT:oe.aF.MAP);const re=j===oe.aF.MAP,le=l.getLayoutValue("text-keep-upright",v)&&re,pe=O===F.jx.HITTEST,ve=.8*3/z;this._glyphTextureSize||(this._glyphTextureSize=(0,be.f)(P.width/4,P.height/4));const Ie=l.getPaintValue("text-translate",v),De=l.getPaintValue("text-translate-anchor",v),Pe=this._sdfProgramOptions;Pe.id=pe;const me=q.getMaterialProgram(f,b,Pe);if(M&&null!=w&&!me.compiled)return void w();f.useProgram(me),me.setUniformMatrix3fv("u_displayViewMat3",j===oe.aF.MAP?_.displayViewMat3:_.displayMat3),me.setUniformMatrix3fv("u_displayMat3",De===oe.fD.VIEWPORT?_.displayMat3:_.displayViewMat3),me.setUniform2fv("u_textTranslation",Ie),me.setUniform1f("u_depth",l.z+152587890625e-16),me.setUniform2fv("u_mosaicSize",this._glyphTextureSize),me.setUniform1f("u_mapRotation",(0,Re.s5)(_.rotation)),me.setUniform1f("u_keepUpright",le?1:0),me.setUniform1f("u_level",10*v),me.setUniform1i("u_texture",d._E),me.setUniform1f("u_antialiasingWidth",ve),me.setUniform1f("u_fadeDuration",Ce.v7/1e3),pe&&me.setUniform4fv("u_id",x);let Ae=-1;for(const Ee of a){if(!Ee.layerData.has(y)||(Ee.key.level!==Ae&&(Ae=Ee.key.level,b.setDataUniforms(me,v,l,Ae,n)),B=Ee.layerData.get(y),0===B.glyphPerPageElementsMap.size))continue;B.prepareForRendering(f),B.updateOpacityInfo();const Ge=B.textVAO;if(null==Ge)continue;f.bindVAO(Ge),me.setUniformMatrix3fv("u_dvsMat3",Ee.transforms.dvs),this._setStencilState(i,Ee);const We=(performance.now()-B.lastOpacityUpdate)/1e3;me.setUniform1f("u_time",We),B.glyphPerPageElementsMap.forEach((He,Ye)=>{this._renderGlyphRange(f,He,Ye,P,me,X,ee,Ee)})}}_renderGlyphRange(i,l,a,x,f,v,O,P){x.bind(i,e.cw.LINEAR,a,d._E),v&&(f.setUniform1f("u_halo",1),i.drawElements(e.MX.TRIANGLES,l[1],e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*l[0]),P.triangleCount+=l[1]/3),O&&(f.setUniform1f("u_halo",0),i.drawElements(e.MX.TRIANGLES,l[1],e.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*l[0]),P.triangleCount+=l[1]/3)}_setStencilState(i,l){const{context:a,is3D:x,stencilSymbols:f}=i;if(a.setStencilTestEnabled(!0),f)return a.setStencilWriteMask(255),void a.setStencilFunction(e.wb.ALWAYS,l.stencilRef,255);a.setStencilWriteMask(0),x?a.setStencilFunction(e.wb.EQUAL,l.stencilRef,255):a.setStencilFunction(e.wb.GREATER,255,255)}},dotDensity:class c extends U{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([d.Of,d.vk]),this._dotVAO=null,this._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])}}dispose(){super.dispose(),this._disposeTextures(),this._dotFBO=(0,G.M2)(this._dotFBO),this._dotVAO=(0,G.M2)(this._dotVAO)}getGeometryType(){return F.LW.FILL}supportsSymbology(i){return i===F.mD.DOT_DENSITY}_drawFills(i,l,a,x,f,v){const{passOptions:O}=i;if(null!=O&&"hittest"===O.type)super._drawFills(i,l,a,x,f,v);else{const P=this._drawDotLocations(i,l,a,f,v);this._drawDotDensity(i,l,P)}}_drawDotDensity(i,l,a){const{context:x,painter:f,rendererInfo:v,requestRender:O,allowDelayedRender:P}=i,D=f.materialManager.getProgram(this._dotDesc);if(P&&null!=O&&!D.compiled)return void O();const{rendererSchema:z}=v;(0,m.t4)(z,"dot-density");const n=this._createDotDensityMesh(x,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:e.g.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});x.setStencilTestEnabled(!0),x.useProgram(D),D.setUniform1f("u_tileZoomFactor",1),D.setUniform1i("u_texture",this._dotSamplers[0]),D.setUniform1f("u_dotSize",Math.max(z.dotSize,1)),D.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(D,i,l),x.bindTexture(a,this._dotSamplers[0]),x.bindVAO(n),x.drawArrays(e.MX.POINTS,0,262144)}_drawDotLocations(i,l,a,x,f){const{context:v,rendererInfo:O,requiredLevel:P}=i,D=v.getViewport(),{rendererSchema:z}=O;(0,m.t4)(z,"dot-density");const{dotScale:n,colors:_,activeDots:y,backgroundColor:w,dotValue:M}=z;v.setViewport(0,0,512,512);const b=v.getBoundFramebufferObject(),q=this._createFBO(v);v.bindFramebuffer(q),v.setClearColor(0,0,0,0),v.clear(v.gl.COLOR_BUFFER_BIT|v.gl.STENCIL_BUFFER_BIT),v.setStencilTestEnabled(!1);const B=1/2**(P-l.key.level),Q=d.i9,ae=Q*window.devicePixelRatio*Q*window.devicePixelRatio,J=1/B*(1/B),ee=n?i.state.scale/n:1;return a.setUniform1f("u_tileZoomFactor",B),a.setUniform1f("u_tileDotsOverArea",ae/(d.i9*window.devicePixelRatio*d.i9*window.devicePixelRatio)),a.setUniformMatrix4fv("u_dotColors",_),a.setUniform4fv("u_isActive",y),a.setUniform4fv("u_dotBackgroundColor",w),a.setUniform1f("u_dotValue",Math.max(1,M*ee*J)),this._bindDotDensityTextures(v,a,O,Q),v.drawElements(e.MX.TRIANGLES,x,e.g.UNSIGNED_INT,f),v.setViewport(D.x,D.y,D.width,D.height),v.bindFramebuffer(b),q.colorTexture}_createFBO(i){if(null==this._dotFBO){const x=new de.X(512,512);x.samplingMode=e.cw.NEAREST,x.wrapMode=e.e8.CLAMP_TO_EDGE;const f=new fe.r(i,new xe.Y(e.Tg.DEPTH_STENCIL,512,512));this._dotFBO=new Y.X(i,x,f)}return this._dotFBO}_disposeTextures(){if(this._dotTextures){for(let i=0;i<this._dotTextures.length;i++)this._dotTextures[i].dispose();this._dotTextures=null}}_bindDotDensityTextures(i,l,a,x){const{rendererSchema:f}=a;(0,m.t4)(f,"dot-density");const v=this._createDotDensityTextures(i,x,f.seed);l.setUniform1iv("u_dotTextures",this._dotSamplers);for(let O=0;O<v.length;O++)i.bindTexture(v[O],this._dotSamplers[O])}_createDotDensityMesh(i,l,a){if(null==this._dotVAO){const f=new Int16Array(524288);for(let O=0;O<512;O++)for(let P=0;P<512;P++)f[2*(P+512*O)]=P,f[2*(P+512*O)+1]=O;const v=ne.f.createVertex(i,e.l1.STATIC_DRAW,f);this._dotVAO=new g.U(i,l,a,{geometry:v},null)}return this._dotVAO}_createDotDensityTextures(i,l,a){if(this._dotTextureSize===l&&this._seed===a||(this._disposeTextures(),this._dotTextureSize=l,this._seed=a),null===this._dotTextures){const x=new V.Z(a);this._dotTextures=[this._allocDotDensityTexture(i,l,x),this._allocDotDensityTexture(i,l,x)]}return this._dotTextures}_allocDotDensityTexture(i,l,a){const x=new Float32Array(l*l*4);for(let v=0;v<x.length;v++)x[v]=a.getFloat();const f=new de.X;return f.dataType=e.Br.FLOAT,f.samplingMode=e.cw.NEAREST,f.width=l,f.height=l,new Te.x(i,f,x)}},heatmap:p.Z,pieChart:class Z extends C.Z{supportsSymbology(i){return i===F.mD.PIE_CHART}_drawMarkers(i,l,a,x,f,v,O){const{context:P}=i,{rendererInfo:D}=i,{rendererSchema:z}=D;(0,m.t4)(z,"pie-chart"),a.setUniform4fv("u_colors",z.colors),a.setUniform4fv("u_defaultColor",z.defaultColor),a.setUniform4fv("u_othersColor",z.othersColor),a.setUniform4fv("u_outlineColor",z.outlineColor),a.setUniform1f("u_donutRatio",z.holePercentage),a.setUniform1f("u_sectorThreshold",z.sectorThreshold),a.setUniform1f("u_outlineWidth",z.outlineWidth),P.drawElements(x,f,e.g.UNSIGNED_INT,v)}}}},47132:(ue,W,t)=>{t.d(W,{JM:()=>h,R8:()=>S,cn:()=>A,v7:()=>s});const S=!0,A=32,h=1.5,s=200},93292:(ue,W,t)=>{t.d(W,{As:()=>s,cD:()=>L,sy:()=>h});var S=t(67969),A=t(40852);const h={geometry:[new A.G("a_pos",2,S.g.BYTE,0,2)]},s={geometry:[new A.G("a_pos",2,S.g.BYTE,0,4),new A.G("a_tex",2,S.g.BYTE,2,4)]},L={geometry:[new A.G("a_pos",2,S.g.UNSIGNED_SHORT,0,4)]}},87526:(ue,W,t)=>{t.d(W,{$K:()=>ie,$_:()=>Te,Bw:()=>ye,C$:()=>te,DQ:()=>i,Gg:()=>f,Gr:()=>Be,HX:()=>we,Jq:()=>P,Ll:()=>x,Mk:()=>Oe,UK:()=>Re,Ub:()=>O,Y8:()=>Z,Yw:()=>Ce,Z_:()=>Fe,cM:()=>Ve,e2:()=>se,hj:()=>ce,iw:()=>a,js:()=>v,nU:()=>Se,sG:()=>Ue,wO:()=>ge,ws:()=>he,xV:()=>oe,yP:()=>z});var S=t(26584),A=t(63290),h=t(7547),s=t(39406),L=t(67969),e=t(40852);const r=A.Z.getLogger("esri.views.2d.engine.webgl.Utils"),o="geometry",u=[{name:o,strideInBytes:12}],d=[{name:o,strideInBytes:36}],T=[{name:o,strideInBytes:24}],N=[{name:o,strideInBytes:12}],G=[{name:o,strideInBytes:40}],V=[{name:o,strideInBytes:36}],F=[{name:o,strideInBytes:36}];function R(n){const _={};for(const y of n)_[y.name]=y.strideInBytes;return _}const H=R([{name:o,strideInBytes:36}]),m=R(u),I=R(d),U=R(T),ne=R(N),Y=R(G),fe=R(V),xe=R(F);function Te(n,_){switch(n){case s.LW.MARKER:return _===s.mD.HEATMAP?m:H;case s.LW.FILL:switch(_){case s.mD.DOT_DENSITY:return ne;case s.mD.SIMPLE:case s.mD.OUTLINE_FILL_SIMPLE:return U;default:return I}case s.LW.LINE:return Y;case s.LW.TEXT:return fe;case s.LW.LABEL:return xe}}const de=[o],g=[o],c=[o],p=[o],E=[o];function C(n){switch(n){case s.LW.MARKER:return de;case s.LW.FILL:return g;case s.LW.LINE:return c;case s.LW.TEXT:return p;case s.LW.LABEL:return E}}function Z(n){switch(n%4){case 0:case 2:return 4;case 1:case 3:return 1}}function te(n,_){switch(_%4){case 0:case 2:return new Uint32Array(Math.floor(n*_/4));case 1:case 3:return new Uint8Array(n*_)}}function se(n,_){switch(_%4){case 0:case 2:return new Uint32Array(n);case 1:case 3:return new Uint8Array(n)}}function ie(n){return null!=n}function ce(n){return"number"==typeof n}function he(n){switch(n){case"butt":return h.RL.BUTT;case"round":return h.RL.ROUND;case"square":return h.RL.SQUARE;default:return r.error(new S.Z("mapview-invalid-type",`Cap type ${n} is not a valid option. Defaulting to round`)),h.RL.ROUND}}function oe(n){switch(n){case"miter":return h.AH.MITER;case"bevel":return h.AH.BEVEL;case"round":return h.AH.ROUND;default:return r.error(new S.Z("mapview-invalid-type",`Join type ${n} is not a valid option. Defaulting to round`)),h.AH.ROUND}}function Se(n){switch(n){case"opacity":return s.pc.OPACITY;case"color":return s.pc.COLOR;case"rotation":return s.pc.ROTATION;case"size":return s.pc.SIZE;default:return r.error(`Cannot interpret unknown vv: ${n}`),null}}function ge(n,_,y,w,M,b,q){for(const B in b){const Q=b[B].stride,ae=Z(Q),J=b[B].data,ee=y[B].data;if(null==J||null==ee)continue;const K=Q*M.vertexCount/ae,k=Q*n/ae,X=Q*M.vertexFrom/ae;for(let $=0;$<K;++$)ee[$+k]=J[$+X]}if(null!=q&&null!=w){const B=M.indexCount;for(let Q=0;Q<B;++Q)w[Q+_]=q[Q+M.indexFrom]-M.vertexFrom+n}}const ye={[o]:L.l1.STATIC_DRAW};function Oe(n,_){const y=[];for(let w=0;w<5;++w){const M=C(w),b={};for(const q of M)b[q]={data:_(w,q)};y.push({data:n(w),buffers:b})}return y}function be(n){switch(n){case L.g.BYTE:case L.g.UNSIGNED_BYTE:return 1;case L.g.SHORT:case L.g.UNSIGNED_SHORT:return 2;case L.g.FLOAT:case L.g.INT:case L.g.UNSIGNED_INT:return 4}}function Ce(n){switch(n){case L.Br.UNSIGNED_BYTE:return 1;case L.Br.UNSIGNED_SHORT_4_4_4_4:return 2;case L.Br.FLOAT:return 4;default:return void r.error(new S.Z("webgl-utils",`Unable to handle type ${n}`))}}function Re(n){switch(n){case L.Br.UNSIGNED_BYTE:return Uint8Array;case L.Br.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case L.Br.FLOAT:return Float32Array;default:return void r.error(new S.Z("webgl-utils",`Unable to handle type ${n}`))}}const Ne=n=>{const _=new Map;for(const y in n)for(const w of n[y])_.set(w.name,w.location);return _},ze=n=>{const _={};for(const y in n){const w=n[y];_[y]=w?.length?w[0].stride:0}return _},Le=new Map,Ve=(n,_)=>{if(!Le.has(n)){const y=function Me(n){const _={};for(const y in n){let M=0;_[y]=n[y].map(b=>{const q=new e.G(b.name,b.count,b.type,M,0,b.normalized||!1);return M+=b.count*be(b.type),q}),_[y]?.forEach(b=>b.stride=M)}return _}(_),w={strides:ze(y),bufferLayouts:y,attributes:Ne(_)};Le.set(n,w)}return Le.get(n)};function Fe(n){n(s.LW.FILL),n(s.LW.LINE),n(s.LW.MARKER),n(s.LW.TEXT),n(s.LW.LABEL)}const Ue=n=>"path"in n&&D(n.path),we=n=>!(!("url"in n)||!n.url)||!(!("imageData"in n)||!n.imageData),Be=n=>"imageData"in n&&n.imageData&&"contentType"in n&&n.contentType?`data:${n.contentType};base64,${n.imageData}`:"url"in n?n.url:null,_e=n=>null!=n&&n.startsWith("data:image/gif"),i=n=>"url"in n&&n.url&&(n.url.includes(".gif")||_e(n.url))||"contentType"in n&&"image/gif"===n.contentType||"imageData"in n&&_e(n.imageData),l=n=>null!=n&&n.startsWith("data:image/png"),a=n=>"url"in n&&n.url&&(n.url.includes(".png")||l(n.url))||"contentType"in n&&"image/png"===n.contentType||"imageData"in n&&l(n.imageData),x=n=>n.type&&n.type.toLowerCase().includes("3d");function f(n){switch(n.type){case"line":return"CIMSolidStroke"===n.cim.type&&!n.dashTemplate;case"fill":return"CIMSolidFill"===n.cim.type;case"esriSFS":return"esriSFSSolid"===n.style||"esriSFSNull"===n.style;case"esriSLS":return"esriSLSSolid"===n.style||"esriSLSNull"===n.style;default:return!1}}function v(n){switch("cim"in n?n.cim.type:n.type){case"esriSMS":case"esriPMS":case"CIMPointSymbol":return!1;case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":return z(n);default:return!0}}function O(n){return"maxVVSize"in n&&n.maxVVSize||"width"in n&&n.width||"size"in n&&n.size||0}function P(n){const _=[];for(let y=0;y<n.length;y++)_.push(n.charCodeAt(y));return _}const D=n=>!!n&&(n=n.trim(),!!(/^[mzlhvcsqta]\s*[-+.0-9][^mlhvzcsqta]+/i.test(n)&&/[\dz]$/i.test(n)&&n.length>4)),z=n=>"fill"===n.type&&"CIMMarkerPlacementInsidePolygon"===n?.cim?.markerPlacement?.type},50392:(ue,W,t)=>{t.d(W,{Z:()=>L});var S=t(83994),A=t(67969),h=t(49353),s=t(40852);class L{constructor(r,o){this._rctx=r,this._vertexBuffer=S.f.createVertex(r,A.l1.STATIC_DRAW,new Uint16Array(o)),this._vao=new h.U(r,new Map([["a_position",0]]),{geometry:[new s.G("a_position",2,A.g.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=o.length/2}bind(){this._rctx.bindVAO(this._vao)}unbind(){this._rctx.bindVAO(null)}dispose(){this._vao.dispose()}draw(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(A.MX.TRIANGLE_STRIP,0,this._count)}}},44589:(ue,W,t)=>{t.d(W,{Z:()=>Te}),t(8314);var A=t(93548),h=t(1011),s=t(26584),L=t(63290),e=t(32917),r=t(49966),o=t(57477),u=t(11915),d=t(67831),T=t(99770),N=t(82054),G=t(88071),V=t(5254),F=t(83994),R=t(67969);const m=(de,g,c,p)=>{let E=0;for(let C=1;C<c;C++)E+=(de[2*(g+C)]-de[2*(g+C-1)])*(de[2*(g+C)+1]+de[2*(g+C-1)+1]);return p?E>0:E<0},I=({coords:de,lengths:g},c)=>{const p=[];for(let E=0,C=0;E<g.length;C+=g[E],E+=1){const Z=C,te=[];for(;E<g.length-1&&m(de,C+g[E],g[E+1],c);E+=1,C+=g[E])te.push(C+g[E]-Z);const se=de.slice(2*Z,2*(C+g[E])),ie=(0,u.e)(se,te,2);for(const ce of ie)p.push(ce+Z)}return p};class U{constructor(g,c,p,E=!1){this._cache={},this.vertices=g,this.indices=c,this.primitiveType=p,this.isMapSpace=E}static fromRect({x:g,y:c,width:p,height:E}){return U.fromScreenExtent({xmin:g,ymin:c,xmax:g+p,ymax:c+E})}static fromPath(g){const c=(0,N.ks)(new G.Z,g.path,!1,!1),p=c.coords,E=new Uint32Array(I(c,!0)),C=new Uint32Array(p.length/2);for(let Z=0;Z<C.length;Z++)C[Z]=(0,V.UJ)(Math.floor(p[2*Z]),Math.floor(p[2*Z+1]));return new U({geometry:C},E,R.MX.TRIANGLES)}static fromGeometry(g,c){const p=c.geometry?.type;switch(p){case"polygon":return U.fromPolygon(g,c.geometry);case"extent":return U.fromMapExtent(g,c.geometry);default:return L.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D").error(new s.Z("mapview-bad-type",`Unable to create a mesh from type ${p}`,c)),U.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(g,c){const p=(0,N.Uy)(new G.Z,c,!1,!1),E=p.coords,C=new Uint32Array(I(p,!1)),Z=new Uint32Array(E.length/2),te=(0,T.a)(),se=(0,T.a)();for(let ie=0;ie<Z.length;ie++)(0,d.s)(te,E[2*ie],E[2*ie+1]),g.toScreen(se,te),Z[ie]=(0,V.UJ)(Math.floor(se[0]),Math.floor(se[1]));return new U({geometry:Z},C,R.MX.TRIANGLES,!0)}static fromScreenExtent({xmin:g,xmax:c,ymin:p,ymax:E}){const C={geometry:new Uint32Array([(0,V.UJ)(g,p),(0,V.UJ)(c,p),(0,V.UJ)(g,E),(0,V.UJ)(g,E),(0,V.UJ)(c,p),(0,V.UJ)(c,E)])},Z=new Uint32Array([0,1,2,3,4,5]);return new U(C,Z,R.MX.TRIANGLES)}static fromMapExtent(g,c){const[p,E]=g.toScreen([0,0],[c.xmin,c.ymin]),[C,Z]=g.toScreen([0,0],[c.xmax,c.ymax]),te={geometry:new Uint32Array([(0,V.UJ)(p,E),(0,V.UJ)(C,E),(0,V.UJ)(p,Z),(0,V.UJ)(p,Z),(0,V.UJ)(C,E),(0,V.UJ)(C,Z)])},se=new Uint32Array([0,1,2,3,4,5]);return new U(te,se,R.MX.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose();for(const g in this._cache.vertexBuffers)null!=this._cache.vertexBuffers[g]&&this._cache.vertexBuffers[g].dispose()}get elementType(){return(de=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return R.g.UNSIGNED_BYTE;case 2:return R.g.UNSIGNED_SHORT;case 4:return R.g.UNSIGNED_INT;default:throw new s.Z("Cannot get DataType of array")}})()}getIndexBuffer(g,c=R.l1.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=F.f.createIndex(g,c,this.indices)),this._cache.indexBuffer}getVertexBuffers(g,c=R.l1.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((p,E)=>({...p,[E]:F.f.createVertex(g,c,this.vertices[E])}),{})),this._cache.vertexBuffers}}var ne=t(49353);const Y=de=>parseFloat(de)/100;class fe extends o.s{constructor(g,c){super(),this._clip=c,this._cache={},this.stage=g,this._handle=(0,e.YP)(()=>c.version,()=>this._invalidate()),this.ready()}static fromClipArea(g,c){return new fe(g,c)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(g,c,p,E){const[C,Z]=c.size;if("geometry"!==this._clip.type&&this._lastWidth===C&&this._lastHeight===Z||(this._lastWidth=C,this._lastHeight=Z,this._destroyGL()),null==this._cache.vao){const te=this._createMesh(c,this._clip),se=te.getIndexBuffer(g),ie=te.getVertexBuffers(g);this._cache.mesh=te,this._cache.vao=new ne.U(g,p,E,ie,se)}return this._cache.vao}_createTransforms(){return{dvs:(0,r.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(g,c){const[p,E]=g.size,C="string"==typeof c.left?Y(c.left)*p:c.left,Z="string"==typeof c.right?Y(c.right)*p:c.right,te="string"==typeof c.top?Y(c.top)*E:c.top,se="string"==typeof c.bottom?Y(c.bottom)*E:c.bottom,ce=te;return{x:C,y:ce,width:Math.max(p-Z-C,0),height:Math.max(E-se-ce,0)}}_createMesh(g,c){switch(c.type){case"rect":return U.fromRect(this._createScreenRect(g,c));case"path":return U.fromPath(c);case"geometry":return U.fromGeometry(g,c);default:return L.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo").error(new s.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),U.fromRect({x:0,y:0,width:1,height:1})}}}var xe=t(39406);class Te extends h.W{set clips(g){super.clips=g,this._updateClippingInfo(g)}renderChildren(g){null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(g.painter));for(const c of this._renderPasses)try{c.render(g)}catch{}}prepareRenderPasses(g){return[g.registerRenderPass({name:"clip",brushes:[A.U.clip],target:()=>this._clippingInfos,drawPhase:xe.jx.MAP|xe.jx.LABEL|xe.jx.LABEL_ALPHA|xe.jx.DEBUG|xe.jx.HIGHLIGHT})]}_updateClippingInfo(g){null!=this._clippingInfos&&(this._clippingInfos.forEach(c=>c.destroy()),this._clippingInfos=null),null!=g&&g.length&&(this._clippingInfos=g.items.map(c=>fe.fromClipArea(this.stage,c))),this.requestRender()}}},43987:(ue,W,t)=>{t.d(W,{Z:()=>r});var S=t(39351),A=t(50392),h=t(62856),s=t(67969);const L={nearest:{defines:[],samplingMode:s.cw.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:s.cw.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:s.cw.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:s.cw.LINEAR_MIPMAP_LINEAR,mips:!0}};class r extends h.Z{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_pos",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:u}){u.setBlendingEnabled(!0),u.setColorMask(!0,!0,!0,!0),u.setStencilWriteMask(0),u.setStencilTestEnabled(!0)}draw(u,d){const{context:T,renderingOptions:N,painter:G,requestRender:V,allowDelayedRender:F}=u;if(!d.source||!d.isReady)return;const R=((o,u,d)=>{if("dynamic"===d.samplingMode){const{state:T}=o,N=u.resolution/u.pixelRatio/T.resolution,G=Math.round(o.pixelRatio)!==o.pixelRatio;return T.rotation||N>1.05||N<.95||G||u.isSourceScaled||u.rotation?L.bilinear:L.nearest}return L[d.samplingMode]})(u,d,N),H=G.materialManager.getProgram(this._desc,R.defines);if(F&&null!=V&&!H.compiled)return void V();u.timeline.begin(this.name),"additive"===d.blendFunction?T.setBlendFunctionSeparate(s.zi.ONE,s.zi.ONE,s.zi.ONE,s.zi.ONE):T.setBlendFunctionSeparate(s.zi.ONE,s.zi.ONE_MINUS_SRC_ALPHA,s.zi.ONE,s.zi.ONE_MINUS_SRC_ALPHA),T.setStencilFunction(s.wb.EQUAL,d.stencilRef,255),this._quad||(this._quad=new A.Z(T,[0,0,1,0,0,1,1,1]));const{coordScale:m,computedOpacity:I,transforms:U}=d;d.setSamplingProfile(R),d.bind(u.context,S.Ib),T.useProgram(H),H.setUniformMatrix3fv("u_dvsMat3",U.dvs),H.setUniform1i("u_texture",S.Ib),H.setUniform2fv("u_coordScale",m),H.setUniform1f("u_opacity",I),this._quad.draw(),u.timeline.end(this.name)}}},62856:(ue,W,t)=>{t.d(W,{Z:()=>S});class S{constructor(){this.name=this.constructor.name||"UnnamedBrush",this.brushEffect=null}prepareState(h,s){}draw(h,s,L){}drawMany(h,s,L){for(const e of s)e.visible&&this.draw(h,e,L)}}},64887:(ue,W,t)=>{t.d(W,{Z:()=>ne});var S=t(63290),A=t(62208),h=t(39406),s=t(50392),L=t(23482),e=t(46213),r=t(25575),o=t(80738),u=t(67969),d=t(85775),T=t(26584);class N{constructor(c,p,E,C){this.dataType=c,this.samplingMode=p,this.pixelFormat=E,this.internalFormat=C}}var V=t(49266),F=t(20781),R=t(18952),H=t(31548);const m=S.Z.getLogger("esri.views.2d.engine.webgl.brushes.WGLBrushHeatmap");function I(g){return"heatmap"===g.type}function U(g,c){const{referenceScale:p,radius:E}=g;return E*(0!==p?p/c.scale:1)}class ne extends L.Z{constructor(){super(...arguments),this.brushEffect=new de}supportsSymbology(c){return c===h.mD.HEATMAP}dispose(){super.dispose(),this.brushEffect.dispose(),this.brushEffect=null}prepareState(){}drawGeometry(c,p,E,C){const{defines:Z}=this.brushEffect.loadQualityProfile(c.context);super.drawGeometry(c,p,E,C?[...C,...Z]:Z)}_drawMarkers(c,p,E,C,Z,te,se){const{context:ie,rendererInfo:ce,state:he}=c,{rendererSchema:oe}=ce;(0,r.t4)(oe,"heatmap");const{isFieldActive:Se}=oe;E.setUniform1f("u_radius",U(oe,he)),se||(E.setUniform1f("u_isFieldActive",Se),ie.setStencilFunction(u.wb.GEQUAL,p.stencilRef,255)),ie.drawElements(C,Z,u.g.UNSIGNED_INT,te)}}const Y={vsPath:"heatmap/heatmapResolve",fsPath:"heatmap/heatmapResolve",attributes:new Map([["a_position",0]])};class de extends e.Q{constructor(){super(...arguments),this.name=this.constructor.name}createOptions({passOptions:c}){return c}dispose(){this._prevFBO=null,null!=this._accumulateFramebuffer&&this._accumulateFramebuffer.detachDepthStencilBuffer(),this._accumulateOutputStencilBuffer=(0,A.M2)(this._accumulateOutputStencilBuffer),this._accumulateFramebuffer=(0,A.M2)(this._accumulateFramebuffer),this._resolveGradientTexture=(0,A.M2)(this._resolveGradientTexture),this._tileQuad=(0,A.M2)(this._tileQuad)}bind(c){const{context:p,rendererInfo:E,passOptions:C,state:Z}=c,{rendererSchema:te}=E;(null==C||"hittest"!==C.type)&&I(te)&&(this._prevFBO=p.getBoundFramebufferObject(),this._prevViewport=p.getViewport(),(0,r.t4)(te,"heatmap"),this._loadResources(c),this._updateResources(p,te,Z),p.bindFramebuffer(this._accumulateFramebuffer),p.setViewport(0,0,this._accumulateFramebuffer.width,this._accumulateFramebuffer.height),p.setStencilTestEnabled(!0),p.setBlendingEnabled(!0),p.setBlendFunction(u.zi.ONE,u.zi.ONE),p.setClearColor(0,0,0,0),p.clear(u.lk.COLOR_BUFFER_BIT))}unbind(){this._prevFBO=null,this._prevViewport=null}draw(c){const{context:p,painter:E,rendererInfo:C,passOptions:Z}=c,{rendererSchema:te}=C;if(null!=Z&&"hittest"===Z.type||!I(te))return;const{defines:se}=this.loadQualityProfile(p),ie=E.materialManager.getProgram(Y,se);p.useProgram(ie),p.bindFramebuffer(this._prevFBO),p.setViewport(0,0,this._prevViewport.width,this._prevViewport.height),p.setBlendFunction(u.zi.ONE,u.zi.ONE_MINUS_SRC_ALPHA),p.setStencilTestEnabled(!1);const{radius:ce,minDensity:he,densityRange:oe}=te;p.bindTexture(this._accumulateFramebuffer.colorTexture,8),p.bindTexture(this._resolveGradientTexture,9),ie.setUniform1i("u_texture",8),ie.setUniform1i("u_gradient",9),ie.setUniform2f("u_densityMinAndInvRange",he,1/oe),ie.setUniform1f("u_densityNormalization",3/(ce*ce*Math.PI)),this._tileQuad.draw()}_loadResources({context:c,painter:p}){const{dataType:E,samplingMode:C,pixelFormat:Z,internalFormat:te,requiresSharedStencilBuffer:se}=this.loadQualityProfile(c),{width:ie,height:ce}=this._prevViewport,he=se?1:.25,oe=ie*he,Se=ce*he;let ge=new H.X(oe,Se);ge.pixelFormat=Z,ge.internalFormat=te,ge.dataType=E,ge.samplingMode=C,ge.wrapMode=u.e8.CLAMP_TO_EDGE,se||(this._accumulateOutputStencilBuffer??=new V.r(c,new F.Y(u.Tg.DEPTH_STENCIL,oe,Se))),this._accumulateFramebuffer??=new d.X(c,ge,se?p.getSharedStencilBuffer():this._accumulateOutputStencilBuffer),ge=new H.X,ge.wrapMode=u.e8.CLAMP_TO_EDGE,this._resolveGradientTexture??=new R.x(c,ge),this._tileQuad??=new s.Z(c,[0,0,1,0,0,1,1,1])}_updateResources(c,p,E){const{gradientHash:C,gradient:Z}=p;this._prevGradientHash!==C&&(this._resolveGradientTexture.resize(Z.length/4,1),this._resolveGradientTexture.setData(Z),this._prevGradientHash=C);const{requiresSharedStencilBuffer:te}=this.loadQualityProfile(c),se=te?1:function Te(g){return g<2?1:.25}(U(p,E)),{width:ie,height:ce}=this._prevViewport,he=ie*se,oe=ce*se,{width:Se,height:ge}=this._accumulateFramebuffer;if(Se!==he||ge!==oe){const ye=this._accumulateFramebuffer.depthStencil;if(te&&null!=ye){const{width:Oe,height:be}=ye.descriptor;Oe===he&&be===oe||(m.errorOnce("Attempted to resize shared stencil buffer! Detaching instead."),this._accumulateFramebuffer.detachDepthStencilBuffer())}this._accumulateFramebuffer.resize(he,oe)}te||c.blitFramebuffer(this._prevFBO,this._accumulateFramebuffer,0,0,this._prevFBO.width,this._prevFBO.height,0,0,this._accumulateFramebuffer.width,this._accumulateFramebuffer.height,u.lk.STENCIL_BUFFER_BIT,u.cw.NEAREST)}loadQualityProfile(c){if(null==this._qualityProfile){const p=function G(g,c){const{textureFloat:p,colorBufferFloat:E}=g.capabilities,C=p?.textureFloat,Z=p?.textureFloatLinear,te=p?.textureHalfFloat,se=p?.textureHalfFloatLinear,ie=E?.textureFloat,ce=E?.textureHalfFloat,he=E?.floatBlend,oe=g.driverTest.floatBufferBlend.result;if(!C&&!te)throw new T.Z("heatmap:missing-texture-float","HeatmapRenderer requires WebGL2 or the WebGL1 extension OES_texture_float or OES_texture_half_float.");if(!ie&&!ce)throw new T.Z("heatmap:missing-color-buffer-float","HeatmapRenderer requires the WebGL extension EXT_color_buffer_float or EXT_color_buffer_half_float or WEBGL_color_buffer_float.");if(!(he&&oe||ce))throw new T.Z("heatmap:missing-float-blend","HeatmapRenderer requires the WebGL extension EXT_float_blend or EXT_color_buffer_half_float."+(oe?"":" This device claims support for EXT_float_blend, but does not actually support it."));const ge=te&&ce,ye=Z,Oe=se,be=!!E?.R32F,Ce=!!E?.R16F;if(C&&ie&&he&&oe&&(ye||!Oe))return ye||c.warnOnce("Missing WebGL extension OES_texture_float_linear. Heatmap quality may be reduced."),new N(u.Br.FLOAT,ye?u.cw.LINEAR:u.cw.NEAREST,be?u.VI.RED:u.VI.RGBA,be?u.lP.R32F:u.VI.RGBA);if(ge)return Oe||c.warnOnce("Missing WebGL extension OES_texture_half_float_linear. Heatmap quality may be reduced."),new N(u.Br.HALF_FLOAT,Oe?u.cw.LINEAR:u.cw.NEAREST,Ce?u.VI.RED:u.VI.RGBA,Ce?u.lP.R16F:u.VI.RGBA);throw new T.Z("heatmap:missing-hardware-support","HeatmapRenderer requires WebGL extensions that allow it to render and blend to float or half float textures.")}(c,m),E=c.type===o.zO.WEBGL1;this._qualityProfile={...p,requiresSharedStencilBuffer:E,defines:p.dataType!==u.Br.FLOAT?["heatmapPrecisionHalfFloat"]:[]}}return this._qualityProfile}}},8650:(ue,W,t)=>{t.d(W,{Z:()=>F});var S=t(67709),A=t(93292),h=t(62856),s=t(11176),L=t(21596),e=t(83994),r=t(67969),o=t(94299),u=t(18952),d=t(31548),T=t(49353),N=t(38210);class F extends h.Z{constructor(){super(...arguments),this._color=(0,S.f)(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._canvas=null}prepareState({context:H}){H.setBlendingEnabled(!0),H.setBlendFunctionSeparate(r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA,r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA),H.setColorMask(!0,!0,!0,!0),H.setStencilWriteMask(0),H.setStencilTestEnabled(!1)}draw(H,m){const{context:I,requestRender:U,allowDelayedRender:ne}=H;if(!m.isReady)return;if(this._loadWGLResources(I),ne&&null!=U&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void U();I.bindVAO(this._outlineVertexArrayObject),I.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",m.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",m.rangeX,m.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),I.drawArrays(r.MX.LINE_STRIP,0,4);const Y=this._getTexture(I,m);Y&&(I.bindVAO(this._tileInfoVertexArrayObject),I.useProgram(this._tileInfoProgram),I.bindTexture(Y,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",m.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",m.rangeX/m.width,m.rangeY/m.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",Y.descriptor.width,Y.descriptor.height),I.drawArrays(r.MX.TRIANGLE_STRIP,0,4)),I.bindVAO()}_loadWGLResources(H){if(this._outlineProgram&&this._tileInfoProgram)return;const m=(0,o.H)(H,s.O),I=(0,o.H)(H,L.s),U=new Int8Array([0,0,1,0,1,1,0,1]),ne=e.f.createVertex(H,r.l1.STATIC_DRAW,U),Y=new T.U(H,s.O.attributes,A.sy,{geometry:ne}),fe=new Int8Array([0,0,1,0,0,1,1,1]),xe=e.f.createVertex(H,r.l1.STATIC_DRAW,fe),Te=new T.U(H,L.s.attributes,A.sy,{geometry:xe});this._outlineProgram=m,this._tileInfoProgram=I,this._outlineVertexArrayObject=Y,this._tileInfoVertexArrayObject=Te}_getTexture(H,m){if(m.texture&&m.triangleCountReportedInDebug===m.triangleCount)return m.texture;m.triangleCountReportedInDebug=m.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","tileCanvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const I=m.triangleCount;let U=m.key.id;m.triangleCount>0&&(U+=`, ${I}`);const ne=this._canvas,Y=ne.getContext("2d");Y.font="24px sans-serif",Y.textAlign="left",Y.textBaseline="top",Y.clearRect(0,0,300,32),I>1e5?(Y.fillStyle="red",Y.fillRect(0,0,300,32),Y.fillStyle="black"):(Y.clearRect(0,0,300,32),Y.fillStyle="blue"),Y.fillText(U,0,0);const fe=new d.X;return fe.wrapMode=r.e8.CLAMP_TO_EDGE,fe.samplingMode=r.cw.NEAREST,fe.isImmutable=(0,N.Z)(H.gl),m.texture=new u.x(H,fe,ne),m.texture}}},13382:(ue,W,t)=>{t.d(W,{Z:()=>u});var S=t(67709),A=t(93292),h=t(62856),s=t(11176),L=t(83994),e=t(67969),r=t(94299),o=t(49353);class u extends h.Z{constructor(){super(...arguments),this._color=(0,S.f)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:T}){T.setDepthWriteEnabled(!1),T.setDepthTestEnabled(!1),T.setStencilTestEnabled(!0),T.setBlendingEnabled(!1),T.setColorMask(!1,!1,!1,!1),T.setStencilOp(e.xS.KEEP,e.xS.KEEP,e.xS.REPLACE),T.setStencilWriteMask(255)}draw(T,N){const{context:G,requestRender:V,allowDelayedRender:F}=T;this._initialized||this._initialize(G),!F||null==V||this._solidProgram.compiled?(G.setStencilFunctionSeparate(e.LR.FRONT_AND_BACK,e.wb.GREATER,N.stencilRef,255),G.bindVAO(this._solidVertexArrayObject),G.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",N.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[N.rangeX,N.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),G.drawArrays(e.MX.TRIANGLE_STRIP,0,4),G.bindVAO()):V()}_initialize(T){if(this._initialized)return!0;const N=(0,r.H)(T,s.O);if(!N)return!1;const G=new Int8Array([0,0,1,0,0,1,1,1]),V=L.f.createVertex(T,e.l1.STATIC_DRAW,G),F=new o.U(T,s.O.attributes,A.sy,{geometry:V});return this._solidProgram=N,this._solidVertexArrayObject=F,this._initialized=!0,!0}}},66215:(ue,W,t)=>{t.d(W,{Z:()=>L});var S=t(39351),A=t(62856),h=t(18716),s=t(67969);class L extends A.Z{constructor(){super(...arguments),this._computeDesc=new Map}prepareState({context:r},o){o&&o.includes("hittest")?r.setBlendFunctionSeparate(s.zi.ONE,s.zi.ONE,s.zi.ONE,s.zi.ONE):r.setBlendFunctionSeparate(s.zi.ONE,s.zi.ONE_MINUS_SRC_ALPHA,s.zi.ONE,s.zi.ONE_MINUS_SRC_ALPHA),r.setBlendingEnabled(!0),r.setColorMask(!0,!0,!0,!0),r.setStencilWriteMask(0),r.setStencilTestEnabled(!0)}draw(r,o,u){const d=this.getGeometryType();o.commit(r);const T=o.getGeometry(d);null!=T&&(r.timeline.begin(this.name),r.attributeView.bindTextures(r.context),r.context.setStencilFunction(s.wb.EQUAL,o.stencilRef,255),T.forEachCommand(N=>{const G=h.m2.load(N.materialKey).symbologyType;this.supportsSymbology(G)&&this.drawGeometry(r,o,N,u)}))}_setSharedUniforms(r,o,u){const{displayLevel:d,pixelRatio:T,state:N,passOptions:G}=o;null!=G&&"hittest"===G.type&&(r.setUniform2fv("u_hittestPos",G.position),r.setUniform1f("u_hittestDist",G.distance)),r.setUniform1f("u_pixelRatio",T),r.setUniformMatrix3fv("u_tileMat3",u.transforms.tileMat3),r.setUniformMatrix3fv("u_viewMat3",N.viewMat3),r.setUniformMatrix3fv("u_dvsMat3",u.transforms.dvs),r.setUniformMatrix3fv("u_displayViewMat3",N.displayViewMat3),r.setUniform1f("u_currentZoom",Math.floor(d*S.JS)),r.setUniform1i("u_attributeTextureSize",o.attributeView.size),r.setUniform1i("u_attributeData0",S.XO),r.setUniform1i("u_attributeData1",S.jS),r.setUniform1i("u_attributeData2",S.tg),r.setUniform1i("u_attributeData3",S.$y),r.setUniform1i("u_attributeData4",S.Im),r.setUniform1i("u_attributeData5",S.o2)}_setSizeVVUniforms(r,o,u,d){if(r.vvSizeMinMaxValue&&o.setUniform4fv("u_vvSizeMinMaxValue",u.vvSizeMinMaxValue),r.vvSizeScaleStops&&o.setUniform1f("u_vvSizeScaleStopsValue",u.vvSizeScaleStopsValue),r.vvSizeFieldStops){const T=u.getSizeVVFieldStops(d.key.level);null!=T&&(o.setUniform1fv("u_vvSizeFieldStopsValues",T.values),o.setUniform1fv("u_vvSizeFieldStopsSizes",T.sizes))}r.vvSizeUnitValue&&o.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",u.vvSizeUnitValueToPixelsRatio)}_setColorAndOpacityVVUniforms(r,o,u){r.vvColor&&(o.setUniform1fv("u_vvColorValues",u.vvColorValues),o.setUniform4fv("u_vvColors",u.vvColors)),r.vvOpacity&&(o.setUniform1fv("u_vvOpacityValues",u.vvOpacityValues),o.setUniform1fv("u_vvOpacities",u.vvOpacities))}_setRotationVVUniforms(r,o,u){r.vvRotation&&o.setUniform1f("u_vvRotationType","geographic"===u.vvMaterialParameters.vvRotationType?0:1)}_getTriangleDesc(r,o,u=["a_pos"]){const d=o.bufferLayouts.geometry,T=u.map(V=>d.findIndex(F=>F.name===V)),N=`${r}-${T.join("-")}`;let G=this._computeDesc.get(N);if(!G){const V=o.strides,F=o.strides.geometry,R=new Map(o.attributes),H=d.map(ne=>({...ne})),m=Math.max(...o.attributes.values()),I={geometry:H};let U=0;for(const ne of T){const Y=d[ne];I.geometry.push({count:Y.count,name:Y.name+"1",divisor:Y.divisor,normalized:Y.normalized,offset:F+Y.offset,stride:F,type:Y.type}),I.geometry.push({count:Y.count,name:Y.name+"2",divisor:Y.divisor,normalized:Y.normalized,offset:2*F+Y.offset,stride:F,type:Y.type}),R.set(Y.name+"1",m+ ++U),R.set(Y.name+"2",m+ ++U)}G={bufferLayouts:I,attributes:R,strides:V},this._computeDesc.set(N,G)}return G}}},23482:(ue,W,t)=>{t.d(W,{Z:()=>o});var S=t(39406),A=t(87526),h=t(66215),s=t(18716),L=t(25575),e=t(67969);const r={shader:"materials/icon",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:e.g.SHORT},{location:2,name:"a_texCoords",count:2,type:e.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:e.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:e.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:e.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:e.g.UNSIGNED_SHORT}]},hittestAttributes:["a_vertexOffset","a_texCoords"]};class o extends h.Z{dispose(){}getGeometryType(){return S.LW.MARKER}supportsSymbology(d){return d!==S.mD.HEATMAP&&d!==S.mD.PIE_CHART}drawGeometry(d,T,N,G){const{context:V,painter:F,rendererInfo:R,state:H,passOptions:m,requestRender:I,allowDelayedRender:U}=d,ne=s.mE.load(N.materialKey),Y=(0,L.a1)(ne.data),fe=null!=m&&"hittest"===m.type,{shader:xe,vertexLayout:Te,hittestAttributes:de}=Y.programSpec??r;let g=e.MX.TRIANGLES,c=(0,A.cM)(ne.data,Te);fe&&(c=this._getTriangleDesc(N.materialKey,c,de),g=e.MX.POINTS);const{attributes:p,bufferLayouts:E}=c,C=F.materialManager.getMaterialProgram(d,ne,xe,p,G);if(U&&null!=I&&!C.compiled)return void I();V.useProgram(C),ne.textureBinding&&F.textureManager.bindTextures(V,C,ne,!0),this._setSharedUniforms(C,d,T),C.setUniformMatrix3fv("u_displayMat3",ne.vvRotation?H.displayViewMat3:H.displayMat3),this._setSizeVVUniforms(ne,C,R,T),this._setColorAndOpacityVVUniforms(ne,C,R),this._setRotationVVUniforms(ne,C,R);const te=N.target.getVAO(V,E,p,fe);let se=N.indexCount,ie=N.indexFrom*Uint32Array.BYTES_PER_ELEMENT;fe&&(se/=3,ie/=3),V.bindVAO(te),this._drawMarkers(d,T,C,g,se,ie,fe),V.bindVAO(null)}_drawMarkers(d,T,N,G,V,F,R){d.context.drawElements(G,V,e.g.UNSIGNED_INT,F)}}},81295:(ue,W,t)=>{t.d(W,{Vs:()=>L,aH:()=>s,pr:()=>A,t2:()=>h});var S=t(5254);function A(e,r=0,o=!1){const u=e[r+3];return e[r]*=u,e[r+1]*=u,e[r+2]*=u,o||(e[r+3]*=255),e}function h(e){if(!e)return 0;const{r,g:o,b:u,a:d}=e;return(0,S.Jz)(r*d,o*d,u*d,255*d)}function s(e){if(!e)return 0;const[r,o,u,d]=e;return(0,S.Jz)(r*(d/255),o*(d/255),u*(d/255),d)}function L(e,r,o=0){if(null==r)return e[o]=0,e[o+1]=0,e[o+2]=0,void(e[o+3]=0);const{r:u,g:d,b:T,a:N}=r;e[o]=u*N/255,e[o+1]=d*N/255,e[o+2]=T*N/255,e[o+3]=N}},46213:(ue,W,t)=>{t.d(W,{Q:()=>S});class S{constructor(){this.name=this.constructor.name}createOptions(h,s){return null}}},39406:(ue,W,t)=>{var S,A,h,s,L,e,r,o;t.d(W,{LW:()=>S,Un:()=>e,X:()=>s,jx:()=>A,mD:()=>r,mf:()=>L,pc:()=>h}),(o=S||(S={}))[o.FILL=0]="FILL",o[o.LINE=1]="LINE",o[o.MARKER=2]="MARKER",o[o.TEXT=3]="TEXT",o[o.LABEL=4]="LABEL",function(o){o[o.NONE=0]="NONE",o[o.MAP=1]="MAP",o[o.LABEL=2]="LABEL",o[o.LABEL_ALPHA=4]="LABEL_ALPHA",o[o.HITTEST=8]="HITTEST",o[o.HIGHLIGHT=16]="HIGHLIGHT",o[o.CLIP=32]="CLIP",o[o.DEBUG=64]="DEBUG",o[o.NUM_DRAW_PHASES=9]="NUM_DRAW_PHASES"}(A||(A={})),function(o){o[o.SIZE=0]="SIZE",o[o.COLOR=1]="COLOR",o[o.OPACITY=2]="OPACITY",o[o.ROTATION=3]="ROTATION"}(h||(h={})),function(o){o[o.NONE=0]="NONE",o[o.OPACITY=1]="OPACITY",o[o.COLOR=2]="COLOR",o[o.ROTATION=4]="ROTATION",o[o.SIZE_MINMAX_VALUE=8]="SIZE_MINMAX_VALUE",o[o.SIZE_SCALE_STOPS=16]="SIZE_SCALE_STOPS",o[o.SIZE_FIELD_STOPS=32]="SIZE_FIELD_STOPS",o[o.SIZE_UNIT_VALUE=64]="SIZE_UNIT_VALUE"}(s||(s={})),function(o){o[o.MINMAX_TARGETS_OUTLINE=128]="MINMAX_TARGETS_OUTLINE",o[o.SCALE_TARGETS_OUTLINE=256]="SCALE_TARGETS_OUTLINE",o[o.FIELD_TARGETS_OUTLINE=512]="FIELD_TARGETS_OUTLINE",o[o.UNIT_TARGETS_OUTLINE=1024]="UNIT_TARGETS_OUTLINE"}(L||(L={})),function(o){o[o.SPRITE=0]="SPRITE",o[o.GLYPH=1]="GLYPH"}(e||(e={})),function(o){o[o.DEFAULT=0]="DEFAULT",o[o.SIMPLE=1]="SIMPLE",o[o.DOT_DENSITY=2]="DOT_DENSITY",o[o.OUTLINE_FILL=3]="OUTLINE_FILL",o[o.OUTLINE_FILL_SIMPLE=4]="OUTLINE_FILL_SIMPLE",o[o.HEATMAP=5]="HEATMAP",o[o.PIE_CHART=6]="PIE_CHART"}(r||(r={}))},5254:(ue,W,t)=>{t.d(W,{Au:()=>N,Jz:()=>F,UJ:()=>V});const S=new Float32Array(1);function N(m){return[255&m,(65280&m)>>>8,(16711680&m)>>>16,(4278190080&m)>>>24]}function V(m,I){return 65535&m|I<<16}function F(m,I,U,ne){return 255&m|(255&I)<<8|(255&U)<<16|ne<<24}new Uint32Array(S.buffer)},11176:(ue,W,t)=>{t.d(W,{O:()=>A});var S=t(37977);const A={shaders:{vertexShader:(0,S.w)("background/background.vert"),fragmentShader:(0,S.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},21596:(ue,W,t)=>{t.d(W,{s:()=>A});var S=t(37977);const A={shaders:{vertexShader:(0,S.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,S.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])}},37977:(ue,W,t)=>{t.d(W,{w:()=>L});const S={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color * u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos , 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = clamp(vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},debug:{overlay:{"overlay.frag":"precision mediump float;\nvarying vec4 v_color;\nvoid main(void) {\ngl_FragColor = v_color;\n}","overlay.vert":"attribute vec3 a_PositionAndFlags;\nuniform mat3 u_dvsMat3;\nuniform vec4 u_colors[4];\nuniform float u_opacities[4];\nvarying vec4 v_color;\nvoid main(void) {\nvec2 position = a_PositionAndFlags.xy;\nfloat flags = a_PositionAndFlags.z;\nint colorIndex = int(mod(flags, 4.0));\nvec4 color;\nfor (int i = 0; i < 4; i++) {\ncolor = u_colors[i];\nif (i == colorIndex) {\nbreak;\n}\n}\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\nfloat opacity;\nfor (int i = 0; i < 4; i++) {\nopacity = u_opacities[i];\nif (i == opacityIndex) {\nbreak;\n}\n}\nv_color = color * opacity;\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\n}"}},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},heatmap:{heatmapResolve:{"heatmapResolve.frag":"precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data = texture2D(u_texture, v_uv);\nfloat density = data.r * COMPRESSION_FACTOR;\ndensity *= u_densityNormalization;\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor = vec4(color.rgb * color.a, color.a);\n}","heatmapResolve.vert":"precision highp float;\nattribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main() {\nv_uv = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp sampler2D u_attributeData4;\nuniform highp sampler2D u_attributeData5;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nhighp vec4 getAttributeData4(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData4, coords);\n}\nhighp vec4 getAttributeData5(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData5, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","barycentric.glsl":"float inTriangle(vec3 bary) {\nvec3 absBary = abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 = mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst float EPSILON_HITTEST = 0.05;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#include <materials/symbologyTypeUtils.glsl>\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\nout_color = v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#include <materials/symbologyTypeUtils.glsl>\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\nuniform vec2 u_maxIntNumOfCrossing;\n#include <util/encoding.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\na_width *= INV_SCALE_COMPRESSION_FACTOR;\n}\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\na_height *= INV_SCALE_COMPRESSION_FACTOR;\n}\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\nfloat width = u_zoomFactor * a_width * scale.x;\nfloat height = u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nfloat dx = 0.0;\nfloat dy = 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\nfloat id = rgba2float(vec4(a_id, 0.0));\ndx = rand(vec2(id, 0.0));\ndy = rand(vec2(0.0, id));\n}\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 patternSize = vec2(a_width, a_height);\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\ntileOffset = mod(tileOffset, patternSize);\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\n#ifdef VV_COLOR\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\n#else\nv_sampleAlphaOnly = 0.0;\n#endif\n}\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize = 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  = vec3(0.);\nhighp vec4 color  = vec4(0.);\ndraw(color, pos);\nv_color = color;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist = u_hittestDist;\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist < 0. || dist >= hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L = p2 - p1;\nvec2 A = p0 - p1;\nfloat projAL = projectScalar(A, L);\nfloat t = clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist = distance(pos, vec3(u_hittestPos, 1.));\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) > u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba = b - a;\nvec2 ca = c - a;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\nreturn 0.;\n}\nfloat distAB = distPointSegment(p, a, b);\nfloat distBC = distPointSegment(p, b, c);\nfloat distCA = distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif"},icon:{"common.glsl":"#include <util/encoding.glsl>\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\n#ifdef HITTEST\nlowp vec4 fillPixelColor = vec4(1.0);\n#else\nlowp vec4 fillPixelColor = v_color;\n#endif\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif",heatmapAccumulate:{"common.glsl":"varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;","heatmapAccumulate.frag":"precision mediump float;\n#include <materials/icon/heatmapAccumulate/common.glsl>\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor = v_hittestResult;\n#else\nfloat radius = length(v_offsetFromCenter);\nfloat shapeWeight = step(radius, 1.0);\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}","heatmapAccumulate.vert":"precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\n#include <materials/vcommon.glsl>\n#include <materials/hittest/common.glsl>\n#include <materials/icon/heatmapAccumulate/common.glsl>\nvoid main() {\nfloat filterFlags = getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult = vec4(0.);\nhighp vec3 out_pos = vec3(0.);\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult = out_hittestResult;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter = sign(a_vertexOffset);\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},"hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 = a_texCoords  / u_mosaicSize;\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\nfloat alphaSum = 0.;\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z += step(alphaSum, .05) * 2.0;\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvoid main()\n{\n#ifdef HITTEST\nvec4 color = v_color;\n#else\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f = getSize(size.y) / size.y;\nfloat sizeFactor = size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\nsize.xy     *= scaleFactor;\noffset.xy   *= scaleFactor;\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   = a_texCoords / u_mosaicSize;\nfloat filterFlags = getFilterFlags();\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  = vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color = vec4(0.);\nhighp vec3 out_pos   = vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color = out_color;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_isBackground  = a_glyphData.w;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor = (isBackground + isText) * a_color;\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist >= u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = v_color;\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  = vec3(0.);\nv_color = vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},pie:{"pie.frag":"precision mediump float;\n#include <util/atan2.glsl>\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nuniform lowp vec4 u_colors[NUMBER_OF_FIELDS];\nuniform lowp vec4 u_defaultColor;\nuniform lowp vec4 u_othersColor;\nuniform lowp vec4 u_outlineColor;\nuniform float u_donutRatio;\nuniform float u_sectorThreshold;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\n#if __VERSION__ == 300\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\nreturn u_colors[colorIndex];\n#else\nmediump int colorIndex;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == index) {\ncolorIndex = int(filteredSectorToColorId[i].y);\n}\n}\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == colorIndex) {\nreturn u_colors[i];\n}\n}\nreturn u_colors[NUMBER_OF_FIELDS - 1];\n#endif\n}\nconst int OTHER_SECTOR_ID = 255;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle < 0.0) {\nangle += 360.0;\n} else if (angle > 360.0) {\nangle = mod(angle, 360.0);\n}\nint numOfEntries = int(v_numOfEntries);\nfloat maxSectorAngle = v_maxSectorAngle;\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || u_sectorThreshold > 0.0) ? u_othersColor : u_defaultColor;\nlowp vec4 prevColor = vec4(0.0);\nlowp vec4 nextColor = vec4(0.0);\nfloat startSectorAngle = 0.0;\nfloat endSectorAngle = 0.0;\nif (angle < maxSectorAngle) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nstartSectorAngle = endSectorAngle;\nendSectorAngle = v_filteredSectorToColorId[index].x;\nif (endSectorAngle > angle) {\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\nprevColor = u_sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = u_sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index == numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle = maxSectorAngle;\nendSectorAngle = 360.0;\n}\nlowp vec4 outlineColor = u_outlineColor;\nfloat offset = length(v_offset);\nfloat distanceSize = offset * v_size;\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\nfloat distanceToStartSector = (angle - startSectorAngle);\nfloat distanceToEndSector = (endSectorAngle - angle);\nfloat sectorThreshold = 0.6;\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha > 0.0) {\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha > 0.0) {\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize = u_donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut = donutSize - v_outlineWidth;\nfloat aaThreshold = 0.75;\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline = v_size - v_outlineWidth;\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","pie.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\nuniform float u_outlineWidth;\nuniform mediump float u_sectorThreshold;\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nint filter(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\nif (sectorAngle > u_sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle += sectorAngle;\n#if __VERSION__ == 300\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; i++) {\nif (i == filteredInfo.colorId) {\nfilteredSectorToColorId[i] = vec2(filteredInfo.endSectorAngle, currentIndex);\n}\n}\n#endif\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[NUMBER_OF_FIELDS]) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nfloat sectorValue = sectorAngles[index];\nfilter(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/hittest/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = 0.5 * getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat outlineSize = u_outlineWidth;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 size = getMarkerSize(a_offset, a_size, outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nfloat filterFlags = getFilterFlags();\nvec3  pos         = vec3(a_pos * POSITION_PRECISION, 1.0);\nv_opacity      = getOpacity();\nv_id           = norm(a_id);\nv_pos          = u_dvsMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       = sign(a_texCoords - 0.5);\nv_size         = max(size.x, size.y);\nv_outlineWidth = outlineSize;\nfloat attributeData[10];\nvec4 attributeData0 = getAttributeData3(a_id);\nattributeData[0] = filterNaNValues(attributeData0.x);\nattributeData[1] = filterNaNValues(attributeData0.y);\nattributeData[2] = filterNaNValues(attributeData0.z);\nattributeData[3] = filterNaNValues(attributeData0.w);\n#if (NUMBER_OF_FIELDS > 4)\nvec4 attributeData1 = getAttributeData4(a_id);\nattributeData[4] = filterNaNValues(attributeData1.x);\nattributeData[5] = filterNaNValues(attributeData1.y);\nattributeData[6] = filterNaNValues(attributeData1.z);\nattributeData[7] = filterNaNValues(attributeData1.w);\n#endif\n#if (NUMBER_OF_FIELDS > 8)\nvec4 attributeData2 = getAttributeData5(a_id);\nattributeData[8] = filterNaNValues(attributeData2.x);\nattributeData[9] = filterNaNValues(attributeData2.y);\n#endif\nfloat sum = 0.0;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsum += attributeData[i];\n}\nfloat sectorAngles[NUMBER_OF_FIELDS];\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[NUMBER_OF_FIELDS];\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries = float(numOfEntries);\nv_maxSectorAngle = filteredInfo.endSectorAngle;\n#if __VERSION__ == 300\nv_filteredSectorToColorId = filteredSectorToColorId;\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == numOfEntries) {\nbreak;\n}\nv_filteredSectorToColorId[i] = filteredSectorToColorId[i];\n}\n#endif\n#ifdef HITTEST\nhighp vec3 out_pos = vec3(0.0);\nv_color            = vec4(0.0);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  pos, v_size);\ngl_PointSize = 1.0;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},shared:{line:{"common.glsl":"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color = texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},"symbologyTypeUtils.glsl":"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif",text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_isBackground  = a_aux.y;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  = vec3(0.);\nv_color = vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a = 12.9898;\nhighp float b = 78.233;\nhighp float c = 43758.5453;\nhighp float dt = dot(co, vec2(a,b));\nhighp float sn = mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/barycentric.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef SUPPORTS_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * u_viewMat3 * u_tileMat3 + (1.0 - isMapAligned) * u_tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},overlay:{overlay:{"overlay.frag":"precision lowp float;\nuniform lowp sampler2D u_texture;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_texture, v_uv);\ngl_FragColor = color *  u_opacity;\n}","overlay.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_uv;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_perspective;\nvarying mediump vec2 v_uv;\nvoid main(void) {\nv_uv = a_uv;\nfloat w = 1.0 + dot(a_uv, u_perspective);\nvec3 pos = u_dvsMat3 * vec3(a_pos, 1.0);\ngl_Position = vec4(w * pos.xy, 0.0, w);\n}"}},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\nvec4 color = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\ngl_FragColor = clamp(color, 0.0, 1.0);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","common.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\nreturn vec4(rgb, currentPixel.a);\n}","getSurfaceValues.glsl":"#include <raster/common/mirror.glsl>\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\nvec2 onePixel = 1.0 / srcImageSize;\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\nvalues[0] = va.r;\nvalues[1] = vb.r;\nvalues[2] = vc.r;\nvalues[3] = vd.r;\nvalues[4] = ve.r;\nvalues[5] = vf.r;\nvalues[6] = vg.r;\nvalues[7] = vh.r;\nvalues[8] = vi.r;\nvalues[9] = alpha;\n}","inverse.glsl":"float invertValue(float value) {\nfloat s = sign(value);\nreturn (s * s) / (value + abs(s) - 1.0);\n}","mirror.glsl":"vec2 mirror(vec2 pos) {\nvec2 pos1 = abs(pos);\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"getFadeOpacity.glsl":"uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}","getFragmentColor.glsl":"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist > featheringStart) {\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}",imagery:{"imagery.frag":"precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled = texture2D(u_texture, v_texcoord);\nfloat intensity = getIntensity(sampled.r);\ngl_FragColor = getColor(intensity);\ngl_FragColor.a *= getOpacity(sampled.r);\ngl_FragColor.a *= sampled.a;\ngl_FragColor.rgb *= gl_FragColor.a;\n}","imagery.vert":"attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},particles:{"particles.frag":"precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/getFragmentColor.glsl>\nvoid main(void) {\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}","particles.vert":"attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/vv.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nvec2 position0 = a_xyts0.xy;\nfloat t0 = a_xyts0.z;\nfloat speed0 = a_xyts0.w;\nvec2 position1 = a_xyts1.xy;\nfloat t1 = a_xyts1.z;\nfloat speed1 = a_xyts1.w;\nfloat type = a_typeIdDurationSeed.x;\nfloat id = a_typeIdDurationSeed.y;\nfloat duration = a_typeIdDurationSeed.z;\nfloat seed = a_typeIdDurationSeed.w;\nvec2 e0 = a_extrudeInfo.xy;\nvec2 e1 = a_extrudeInfo.zw;\nfloat animationPeriod = duration + u_trailLength;\nfloat scaledTime = u_time * u_flowSpeed;\nfloat randomizedTime = scaledTime + seed * animationPeriod;\nfloat t = mod(randomizedTime, animationPeriod);\nfloat fUnclamped = (t - t0) / (t1 - t0);\nfloat f = clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime = mix(t0, t1, f);\nfloat speed = mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type == 2.0) {\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho = mix(e0, e1, f);\nvec2 parallel;\nparallel = normalize(position1 - position0) * 0.5;\nif (id == 1.0) {\nextrude = ortho;\nv_texcoord = vec2(0.5, 0.0);\n} else if (id == 2.0) {\nextrude = -ortho;\nv_texcoord = vec2(0.5, 1.0);\n} else if (id == 3.0) {\nextrude = ortho + parallel;\nv_texcoord = vec2(1.0, 0.0);\n} else if (id == 4.0) {\nextrude = -ortho + parallel;\nv_texcoord = vec2(1.0, 1.0);\n}\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else {\nif (fUnclamped < 0.0) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id == 1.0) {\nextrude = e0;\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 2.0) {\nextrude = -e0;\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 3.0) {\nextrude = mix(e0, e1, f);\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else if (id == 4.0) {\nextrude = -mix(e0, e1, f);\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n}\n}\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_color.a *= fadeOpacity;\nv_color.a *= mix(1.0, introOpacity, u_introFade);\nv_color.rgb *= v_color.a;\n}"},streamlines:{"streamlines.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/getFragmentColor.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}","streamlines.vert":"attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nvoid main(void) {\nvec4 lineColor = getColor(a_speed);\nfloat lineOpacity = getOpacity(a_speed);\nfloat lineSize = getSize(a_speed);\nvec2 position = a_positionAndSide.xy;\nv_side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_color = lineColor;\nv_color.a *= lineOpacity;\nv_color.rgb *= v_color.a;\nv_size = lineSize;\n}"},"vv.glsl":"#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color = u_color_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_color_count) {\nbreak;\n}\nfloat x1 = u_color_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_color_stops[i];\nvec4 y2 = u_color_values[i];\nif (x < x2) {\nvec4 y1 = u_color_values[i - 1];\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor = y2;\n}\n}\n}\n#else\nvec4 color = u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity = u_opacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_opacity_count) {\nbreak;\n}\nfloat x1 = u_opacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_opacity_stops[i];\nfloat y2 = u_opacity_values[i];\nif (x < x2) {\nfloat y1 = u_opacity_values[i - 1];\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity = y2;\n}\n}\n}\n#else\nfloat opacity = u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size = u_size_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_size_count) {\nbreak;\n}\nfloat x1 = u_size_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_size_stops[i];\nfloat y2 = u_size_values[i];\nif (x < x2) {\nfloat y1 = u_size_values[i - 1];\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize = y2;\n}\n}\n}\n#else\nfloat size = u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\n#include <raster/common/getSurfaceValues.glsl>\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nfloat pv[10];\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},rfx:{aspect:{"aspect.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nconst float pi = 3.14159265359;\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\nalpha *= sign(abs(dzx) + abs(dzy));\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\nfloat aspect = aspect_rad * 180.0 / pi;\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\n}"},bandarithmetic:{"bandarithmetic.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nuniform float u_adjustments[3];\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index;\n#ifdef NDXI\nindex = (nir - red) * invertValue(nir + red);\n#elif defined(SR)\nindex = nir * invertValue(red);\n#elif defined(CI)\nindex = nir * invertValue(red) - 1.0;\n#elif defined(SAVI)\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\n#elif defined(TSAVI)\nfloat s = u_adjustments[0];\nfloat a = u_adjustments[1];\nfloat x = u_adjustments[2];\nfloat y = -a * s + x * (1.0 + s * s);\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\n#elif defined(MAVI)\nindex = 0.5 * (2.0 * (nir + 1.0) - sqrt(pow((2.0 * nir + 1.0), 2.0) - 8.0 * (nir - red)));\n#elif defined(GEMI)\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\n#elif defined(PVI)\nfloat a = u_adjustments[0];\nfloat b = u_adjustments[1];\nfloat y = sqrt(1.0 + a * a);\nindex = (nir - a * red - b) * invertValue(y);\n#elif defined(VARI)\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\n#elif defined(MTVI2)\nfloat green = pv2.b;\nfloat v = pow(sqrt((2.0 * nir + 1.0), 2.0) - 6.0 * nir - 5.0 * sqrt(red) - 0.5);\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * v;\n#elif defined(RTVICORE)\nfloat green = pv2.b;\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\n#elif defined(EVI)\nfloat blue = pv2.b;\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\nindex =  (2.5 * (nir - red)) * invertValue(denom);\n#elif defined(WNDWI)\nfloat g = pv2.r;\nfloat n = pv2.g;\nfloat s = pv2.s;\nfloat a = u_adjustments[0];\nfloat denom = g + a * n + (1.0 - a) * s;\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\n#elif defined(BAI)\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\n#else\ngl_FragColor = pv;\nreturn;\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},compositeband:{"compositeband.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\nuniform sampler2D u_image2;\nvarying vec2 v_texcoord;\nvoid main() {\nvec4 p0 = texture2D(u_image, v_texcoord);\nvec4 p1 = texture2D(u_image1, v_texcoord);\nvec4 p2 = texture2D(u_image2, v_texcoord);\ngl_FragColor = vec4(p0.r, p1.r, p2.r, p0.a * p1.a * p2.a);\n}"},contrast:{"contrast.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#include <raster/common/contrastBrightness.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec4 result = adjustContrastBrightness(pv, false) ;\ngl_FragColor = vec4(result.rgb * 255.0, result.a);\n}"},convolution:{"convolution.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\nuniform float u_kernel[25];\n#include <raster/common/mirror.glsl>\nvoid main() {\nvec3 rgb = vec3(0.0, 0.0, 0.0);\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat alpha = 1.0;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\nalpha *= pv.a;\n}\n}\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(rgb * alpha, alpha);\n}"},curvature:{"curvature.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform float u_zlFactor;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\nfloat curvature = 0.0;\n#ifdef STANDARD\ncurvature = -u_zlFactor * (d + e);\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n#else\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\nfloat g = (-pv[3] + pv[5]) / 2.0;\nfloat h = (pv[1] - pv[7]) / 2.0;\nfloat g2 = g * g;\nfloat h2 = h * h;\n#ifdef PROFILE\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\n#else\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\n#endif\n#endif\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n}"},extractband:{"extractband.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\ngl_FragColor = vec4(pv2, pv.a);\n}"},focalstatistics:{"focalstatistics.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\n#include <raster/common/mirror.glsl>\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat count = 0.0;\n#ifdef STDDEV\nvec3 sum = vec3(0.0, 0.0, 0.0);\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\n#endif\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nvec3 rgb = currentPixel.rgb;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\ncount += pv.a;\n#ifdef MIN\nrgb = min(rgb, pv.rgb);\n#elif defined(MAX)\nrgb = max(rgb, pv.rgb);\n#elif defined(MEAN)\nrgb += pv.rgb;\n#elif defined(STDDEV)\nsum += pv.rgb;\nsum2 += (pv.rgb * pv.rgb);\n#endif\n}\n}\n#ifdef MEAN\nrgb *= invertValue(count);\n#elif defined(STDDEV)\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\n#endif\nfloat alpha = step(0.9999, count);\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\n#ifdef FILL\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\n#endif\ngl_FragColor = vec4(rgb * alpha, alpha);\n}"},local:{"local.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\n#ifdef TWO_IMAGES\n#ifdef ONE_CONSTANT\nfloat b = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, 0);\na = abc.s;\nb = abc.t;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\n#endif\n#elif defined(CONDITIONAL)\n#ifdef TWO_CONSTANT\nfloat b = u_image1Const;\nfloat c = u_image2Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\nfloat c = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nvec4 pv2 = texture2D(u_image2, v_texcoord);\nfloat b = pv1.r;\nfloat c = pv2.r;\n#endif\n#endif\nfloat result = a;\nfloat alpha = pv0.a;\n#ifdef PLUS\nresult = a + b;\n#elif defined(MINUS)\nresult = a - b;\n#elif defined(TIMES)\nresult = a * b;\n#elif defined(DIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOATDIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOORDIVIDE)\nresult = floor(a * invertValue(b));\nalpha *= float(abs(sign(b)));\n#elif defined(SQUARE)\nresult = a * a;\n#elif defined(SQRT)\nresult = sqrt(a);\n#elif defined(POWER)\nresult = pow(a, b);\n#elif defined(LN)\nresult = a <= 0.0 ? 0.0: log(a);\nalpha *= float(a > 0.0);\n#elif defined(LOG_1_0)\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\nalpha *= float(a > 0.0);\n#elif defined(LOG_2)\nresult = a <= 0.0 ? 0.0: log2(a);\nalpha *= float(a > 0.0);\n#elif defined(EXP)\nresult = exp(a);\n#elif defined(EXP_1_0)\nresult = pow(10.0, a);\n#elif defined(EXP_2)\nresult = pow(2.0, a);\n#elif defined(ROUNDDOWN)\nresult = floor(a);\n#elif defined(ROUNDUP)\nresult = ceil(a);\n#elif defined(INT)\nresult = float(sign(a)) * floor(abs(a));\n#elif defined(MOD)\nresult = mod(a, b);\n#elif defined(NEGATE)\nresult = -a;\n#elif defined(ABS)\nresult = abs(a);\n#elif defined(ACOS)\nresult = abs(a) > 1.0 ? 0.0: acos(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ACOSH)\nresult = acosh(a);\n#elif defined(POLYFILLACOSH)\nresult = log(a + sqrt(a * a - 1.0));\n#elif defined(ASIN)\nresult = abs(a) > 1.0 ? 0.0: asin(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ASINH)\nresult = asinh(a);\n#elif defined(POLYFILLASINH)\nresult = log(a + sqrt(a * a + 1.0));\n#elif defined(ATAN)\nresult = atan(a);\n#elif defined(ATANH)\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\nalpha *= step(abs(a), 1.0);\n#elif defined(POLYFILLATANH)\nresult = a == 1.0 ? 0.0 : 0.5 * log((1.0 + a)/(1.0 -a));\n#elif defined(ATAN_2)\nresult = atan(a, b);\n#elif defined(COS)\nresult = cos(a);\n#elif defined(COSH)\nresult = cosh(a);\n#elif defined(POLYFILLCOSH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp + 1.0 / halfexp;\n#elif defined(SIN)\nresult = sin(a);\n#elif defined(SINH)\nresult = sinh(a);\n#elif defined(POLYFILLSINH)\nfloat halfexp = exp(a) / 2.0;\nresult = halfexp - 1.0 / halfexp;\n#elif defined(TAN)\nresult = tan(a);\n#elif defined(TANH)\nresult = tanh(a);\n#elif defined(POLYFILLTANH)\nfloat expx = exp(a);\nresult = (expx - 1.0 / expx) / (expx + 1.0 / expx);\n#elif defined(BITWISEAND)\nresult = a & b;\n#elif defined(BITWISEOR)\nresult = a | b;\n#elif defined(BITWISELEFTSHIFT)\nresult = a << b;\n#elif defined(BITWISERIGHTSHIFT)\nresult = a >> b;\n#elif defined(BITWISENOT)\nresult = ~a;\n#elif defined(BITWISEXOR)\nresult = a ^ b;\n#elif defined(BOOLEANAND)\nresult = float((a != 0.0) && (b != 0.0));\n#elif defined(BOOLEANNOT)\nresult = float(a == 0.0);\n#elif defined(BOOLEANOR)\nresult = float((a != 0.0) || (b != 0.0));\n#elif defined(BOOLEANXOR)\nresult = float((a != 0.0) ^^ (b != 0.0));\n#elif defined(GREATERTHAN)\nresult = float(a > b);\n#elif defined(GREATERTHANEQUAL)\nresult = float(a >= b);\n#elif defined(LESSTHAN)\nresult = float(a < b);\n#elif defined(LESSTHANEQUAL)\nresult = float(a <= b);\n#elif defined(EQUALTO)\nresult = float(a == b);\n#elif defined(NOTEQUAL)\nresult = float(a != b);\n#elif defined(ISNULL)\nresult = float(alpha == 0.0);\nalpha = 1.0;\n#elif defined(SETNULL)\nfloat maskValue = float(a == 0.0);\nresult = maskValue * b;\nalpha *= maskValue;\n#elif defined(CONDITIONAL)\nfloat weight = float(abs(sign(a)));\nresult = weight * b + (1.0 - weight) * c;\n#endif\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\nresult = isInvalid ? 0.0 : result;\nalpha *= float(!isInvalid);\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}"},mask:{"mask.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_INCLUDED_RANGES 6\n#define LEN_NODATA_VALUES 6\nuniform highp float u_includedRanges[6];\nuniform highp float u_noDataValues[6];\nfloat maskFactor(float bandValue, float fromValue, float to) {\nfloat factor = 1.0;\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\nfactor *= float(u_noDataValues[i] != bandValue);\n}\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\nreturn factor;\n}\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\n#ifdef MULTI_BAND\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\nfloat maskFactor = redFactor * greenFactor * blueFactor;\ngl_FragColor = pv * maskFactor;\n#else\ngl_FragColor = pv * redFactor;\n#endif\n}"},ndvi:{"ndvi.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index = (nir - red) * invertValue(nir + red);\n#ifdef SCALED\nindex = floor((index + 1.0) * 100.0 + 0.5);\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},remap:{"remap.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_REMAP_RANGES 18\n#define LEN_NODATA_RANGES 12\nuniform highp float u_rangeMaps[18];\nuniform highp float u_noDataRanges[12];\nuniform highp float u_unmatchMask;\nuniform vec2 u_clampRange;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat factor = 1.0;\nfloat bandValue = pv.r;\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\nfactor *= inside;\n}\nfloat mapValue = 0.0;\nfloat includeMask = 0.0;\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\n}\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\n}"},slope:{"slope.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform float u_zFactor;\nuniform vec2 u_srcImageSize;\nuniform float u_pixelSizePower;\nuniform float u_pixelSizeFactor;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\n#ifdef PERCENT_RISE\nfloat percentRise = rise2run * 100.0;\ngl_FragColor = vec4(percentRise, percentRise, percentRise, alpha);\n#else\nfloat degree = atan(rise2run) * 57.2957795;\ngl_FragColor = vec4(degree, degree, degree, alpha);\n#endif\n}"},stretch:{"stretch.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying highp vec2 v_texcoord;\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\nval = clamp(val, minCutOff, maxCutOff);\nfloat stretchedVal;\n#ifdef USE_GAMMA\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\n#else\nstretchedVal = minOutput + (val - minCutOff) * factor;\n#endif\n#ifdef ROUND_OUTPUT\nstretchedVal = floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\n#ifdef MULTI_BAND\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\n#else\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\n#endif\n}"},vs:{"vs.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"atan2.glsl":"float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 = abs(x);\nt1 = abs(y);\nt0 = max(t3, t1);\nt1 = min(t3, t1);\nt3 = 1.0 / t0;\nt3 = t1 * t3;\nt4 = t3 * t3;\nt0 =         - 0.013480470;\nt0 = t0 * t4 + 0.057477314;\nt0 = t0 * t4 - 0.121239071;\nt0 = t0 * t4 + 0.195635925;\nt0 = t0 * t4 - 0.332994597;\nt0 = t0 * t4 + 0.999995630;\nt3 = t0 * t3;\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\nt3 = y < 0.0 ? -t3 : t3;\nreturn t3;\n}","encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}},s=new(t(7423).B)(function h(e){let r=S;return e.split("/").forEach(o=>{r&&(r=r[o])}),r});function L(e){return s.resolveIncludes(e)}},17807:(ue,W,t)=>{t.d(W,{v:()=>S});class S{static getStorageSpec(h){return null}static createOrUpdateRendererSchema(h,s){return null!=h&&"default"===h.type?h:{type:"default"}}static getVariation(h){return{}}static getVariationHash(h){return 0}}S.type="default",S.programSpec=null},61417:(ue,W,t)=>{t.d(W,{T:()=>L});var S=t(81295),A=t(39351),h=t(17807),s=t(67969);class L extends h.v{static getStorageSpec({attributes:r}){return{visualVariables:!1,attributes:r??null}}static _createRendererSchema(){return{type:"dot-density",colors:new Float32Array(32),dotValue:-1,dotSize:-1,dotScale:-1,dotBlending:!1,backgroundColor:new Float32Array(4),activeDots:new Float32Array(8),seed:-1}}static createOrUpdateRendererSchema(r,o){const{attributes:u,dotValue:d,referenceScale:T,dotSize:N,dotBlendingEnabled:G,seed:V,backgroundColor:F}=o,R=null!=r&&"dot-density"===r.type?r:this._createRendererSchema();R.dotValue=d,R.dotSize=N,R.dotScale=T,R.dotBlending=G,R.seed=V;const{colors:H,activeDots:m,backgroundColor:I}=R;for(let U=0;U<A.Pp;U++)(0,S.Vs)(H,U>=u.length?null:u[U].color,4*U);for(let U=0;U<8;U++)m[U]=U<o.attributes.length?1:0;return(0,S.Vs)(I,F),R}static getVariation(r){return{ddDotBlending:r.dotBlending}}static getVariationHash(r){return r.dotBlending?1:0}}L.type="dot-density",L.programSpec={shader:"materials/fill",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:s.g.SHORT},{location:1,name:"a_id",count:3,type:s.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:s.g.UNSIGNED_BYTE},{location:3,name:"a_inverseArea",count:1,type:s.g.FLOAT}]}}},20468:(ue,W,t)=>{t.d(W,{h:()=>L});var S=t(23841),A=t(36859),h=t(17807),s=t(67969);class L extends h.v{static getStorageSpec({field:r,valueExpression:o}){return{visualVariables:!1,attributes:r||o?[{field:r,valueExpression:o}]:null}}static _createRendererSchema(){return{type:"heatmap",radius:-1,referenceScale:-1,isFieldActive:0,minDensity:-1,densityRange:-1,kernel:null,gradient:null,gradientHash:"invalid"}}static createOrUpdateRendererSchema(r,o){const{radius:u,minDensity:d,maxDensity:T,referenceScale:N,field:G,valueExpression:V,colorStops:F}=o,R=T-d,H=G||V?1:0,m=F.map(({color:ne,ratio:Y})=>`${Y}:${ne.toString()}`).join();let I,U=!0;return null!=r&&"heatmap"===r.type?(I=r,U=m!==r.gradientHash):I=this._createRendererSchema(),I.radius=(0,S.F2)(u),I.minDensity=d,I.densityRange=R,I.referenceScale=N,I.isFieldActive=H,U&&(I.gradient=(0,A.uI)(F),I.gradientHash=m),I}}L.type="heatmap",L.programSpec={shader:"materials/icon/heatmapAccumulate",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:s.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:s.g.SHORT},{location:4,name:"a_id",count:4,type:s.g.UNSIGNED_BYTE}]}}},34084:(ue,W,t)=>{t.d(W,{c:()=>r});var S=t(91558),A=t(23841),h=t(81295),s=t(39351),L=t(17807),e=t(67969);class r extends L.v{static getStorageSpec({attributes:u}){return{visualVariables:!0,attributes:u??null}}static _createRendererSchema(){return{type:"pie-chart",colors:new Float32Array(4*s.x_),defaultColor:new Float32Array(4),othersColor:new Float32Array(4),outlineColor:new Float32Array(4),holePercentage:0,sectorThreshold:0,outlineWidth:1,numberOfFields:10}}static createOrUpdateRendererSchema(u,d){const{attributes:T,defaultColor:N,holePercentage:G,othersCategory:V,outline:F}=d,R=null!=u&&"pie-chart"===u.type?u:this._createRendererSchema();for(let H=0;H<s.x_;H++){const m=H>=T.length?new S.Z([0,0,0,0]):T[H].color;(0,h.Vs)(R.colors,m,4*H)}return(0,h.Vs)(R.defaultColor,N),(0,h.Vs)(R.othersColor,V?.color),(0,h.Vs)(R.outlineColor,F?.color),R.outlineWidth=(0,A.F2)(F?.width||0),R.holePercentage=G,R.sectorThreshold=V?.threshold||0,R.numberOfFields=T.length,R}static getVariation(u){return{numberOfFields:u.numberOfFields}}static getVariationHash(u){return u.numberOfFields}}r.type="pie-chart",r.programSpec={shader:"materials/pie",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:e.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:e.g.SHORT},{location:2,name:"a_texCoords",count:2,type:e.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:e.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:e.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:e.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:e.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:e.g.UNSIGNED_SHORT}]},hittestAttributes:["a_vertexOffset","a_texCoords"]}},25575:(ue,W,t)=>{t.d(W,{EJ:()=>u,a1:()=>d,t4:()=>o});var S=t(26584),A=t(39406),h=t(18716),s=t(17807),L=t(61417),e=t(20468),r=t(34084);function o(T,N){if(T.type!==N)throw new S.Z("material-view-model:unexpected-renderer-schema",`expected to find renderer schema of type "${N}" but found type "${T.type}"`)}function u(T){switch(T?.type){case"dot-density":return L.T;case"heatmap":return e.h;case"pie-chart":return r.c;default:return s.v}}function d(T){const{geometryType:N,symbologyType:G}=h.m2.load(T);switch(N){case A.LW.FILL:if(G===A.mD.DOT_DENSITY)return L.T;break;case A.LW.MARKER:switch(G){case A.mD.HEATMAP:return e.h;case A.mD.PIE_CHART:return r.c}}return s.v}},38210:(ue,W,t)=>{function S(A){return window.WebGL2RenderingContext&&A instanceof window.WebGL2RenderingContext}t.d(W,{Z:()=>S})}}]);